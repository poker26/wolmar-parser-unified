const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function updateAllRatings() {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        const winnersQuery = `
            SELECT DISTINCT winner_login 
            FROM auction_lots 
            WHERE winner_login IS NOT NULL 
            AND winner_login != ''
            AND winning_bid IS NOT NULL 
            AND winning_bid > 0
            ORDER BY winner_login
        `;
        
        const result = await pool.query(winnersQuery);
        const winners = result.rows.map(row => row.winner_login);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${winners.length} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        const stats = await pool.query(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN suspicious_score > 0 THEN 1 END) as users_with_scores,
                MIN(updated_at) as oldest_update,
                MAX(updated_at) as newest_update
            FROM winner_ratings
        `);
        
        console.log('\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã winner_ratings:');
        console.log(`  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.rows[0].total_users}`);
        console.log(`  - –° –±–∞–ª–ª–∞–º–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${stats.rows[0].users_with_scores}`);
        console.log(`  - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${stats.rows[0].newest_update}`);
        
        let updated = 0;
        let errors = 0;
        
        for (const winnerLogin of winners) {
            try {
                await updateWinnerRating(winnerLogin);
                updated++;
                
                if (updated % 100 === 0) {
                    console.log(`üìà –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated}/${winners.length} —Ä–µ–π—Ç–∏–Ω–≥–æ–≤`);
                }
                
            } catch (error) {
                errors++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è ${winnerLogin}:`, error.message);
            }
        }
        
        console.log(`‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${updated} —É—Å–ø–µ—à–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:', error);
    } finally {
        await pool.end();
    }
}

async function updateWinnerRating(winnerLogin) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = await pool.query(`
            SELECT 
                winner_login,
                COUNT(*) as total_lots,
                SUM(winning_bid) as total_spent,
                AVG(winning_bid) as avg_lot_price,
                MAX(winning_bid) as max_lot_price,
                COUNT(DISTINCT auction_number) as unique_auctions,
                MIN(auction_end_date) as first_auction_date,
                MAX(auction_end_date) as last_auction_date
            FROM auction_lots 
            WHERE winner_login = $1 
            AND winning_bid IS NOT NULL 
            AND winning_bid > 0
            GROUP BY winner_login
        `, [winnerLogin]);
        
        if (stats.rows.length === 0) {
            return null;
        }
        
        const winnerData = stats.rows[0];
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        const rating = calculateRating(winnerData);
        const category = getRatingCategory(rating);
        const activityDays = winnerData.first_auction_date && winnerData.last_auction_date 
            ? Math.round((new Date(winnerData.last_auction_date) - new Date(winnerData.first_auction_date)) / (1000 * 60 * 60 * 24))
            : 0;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        const upsertQuery = `
            INSERT INTO winner_ratings (
                winner_login, total_spent, total_lots, unique_auctions,
                avg_lot_price, max_lot_price, first_auction_date, last_auction_date,
                activity_days, rating, category, updated_at
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NOW())
            ON CONFLICT (winner_login) DO UPDATE SET
                total_spent = EXCLUDED.total_spent,
                total_lots = EXCLUDED.total_lots,
                unique_auctions = EXCLUDED.unique_auctions,
                avg_lot_price = EXCLUDED.avg_lot_price,
                max_lot_price = EXCLUDED.max_lot_price,
                first_auction_date = EXCLUDED.first_auction_date,
                last_auction_date = EXCLUDED.last_auction_date,
                activity_days = EXCLUDED.activity_days,
                rating = EXCLUDED.rating,
                category = EXCLUDED.category,
                updated_at = NOW()
        `;

        await pool.query(upsertQuery, [
            winnerLogin,
            winnerData.total_spent,
            winnerData.total_lots,
            winnerData.unique_auctions,
            winnerData.avg_lot_price,
            winnerData.max_lot_price,
            winnerData.first_auction_date,
            winnerData.last_auction_date,
            activityDays,
            rating,
            category.category
        ]);

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è ${winnerLogin}:`, error);
        throw error;
    }
}

function calculateRating(winnerData) {
    const {
        total_spent,
        total_lots,
        unique_auctions,
        avg_lot_price,
        max_lot_price,
        first_auction_date,
        last_auction_date
    } = winnerData;

    // –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö)
    const daysActive = first_auction_date && last_auction_date 
        ? (new Date(last_auction_date) - new Date(first_auction_date)) / (1000 * 60 * 60 * 24)
        : 0;
    const activityScore = Math.min(100, (daysActive / 365) * 100); // 1 –≥–æ–¥ = 100 –±–∞–ª–ª–æ–≤

    // –§–∞–∫—Ç–æ—Ä—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π (0-100) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const factors = {
        // –¢—Ä–∞—Ç—ã: 10–ú = 100 –±–∞–ª–ª–æ–≤ (–¥–ª—è —Å–∞–º—ã—Ö —Ç–æ–ø–æ–≤—ã—Ö), 5–ú = 50 –±–∞–ª–ª–æ–≤, 1–ú = 10 –±–∞–ª–ª–æ–≤
        spending: Math.min(100, (total_spent / 10000000) * 100),
        
        // –õ–æ—Ç—ã: 100 = 100 –±–∞–ª–ª–æ–≤, 50 = 50 –±–∞–ª–ª–æ–≤, 20 = 20 –±–∞–ª–ª–æ–≤
        volume: Math.min(100, (total_lots / 100) * 100),
        
        // –ê—É–∫—Ü–∏–æ–Ω—ã: 10 = 100 –±–∞–ª–ª–æ–≤, 5 = 50 –±–∞–ª–ª–æ–≤, 2 = 20 –±–∞–ª–ª–æ–≤
        diversity: Math.min(100, (unique_auctions / 10) * 100),
        
        // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: 500–ö = 100 –±–∞–ª–ª–æ–≤, 100–ö = 20 –±–∞–ª–ª–æ–≤, 10–ö = 2 –±–∞–ª–ª–∞
        consistency: Math.min(100, (avg_lot_price / 500000) * 100),
        
        // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        activity: activityScore
    };

    // –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞
    const rating = Math.round(
        factors.spending * 0.35 +      // 35% - –æ–±—â–∞—è —Å—É–º–º–∞
        factors.volume * 0.25 +         // 25% - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
        factors.diversity * 0.15 +      // 15% - —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
        factors.consistency * 0.15 +   // 15% - —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ª–æ—Ç–∞
        factors.activity * 0.10        // 10% - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    );

    return Math.max(1, Math.min(100, rating));
}

function getRatingCategory(rating) {
    if (rating >= 85) return { category: '–≠–∫—Å–ø–µ—Ä—Ç', color: '#FFD700', icon: 'üëë' };
    if (rating >= 70) return { category: '–ü—Ä–æ—Ñ–∏', color: '#C0C0C0', icon: 'ü•á' };
    if (rating >= 50) return { category: '–û–ø—ã—Ç–Ω—ã–π', color: '#CD7F32', icon: 'ü•à' };
    if (rating >= 30) return { category: '–ê–∫—Ç–∏–≤–Ω—ã–π', color: '#4CAF50', icon: 'ü•â' };
    if (rating >= 15) return { category: '–ù–∞—á–∏–Ω–∞—é—â–∏–π', color: '#2196F3', icon: '‚≠ê' };
    return { category: '–ù–æ–≤–∏—á–æ–∫', color: '#9E9E9E', icon: 'üå±' };
}

updateAllRatings();



