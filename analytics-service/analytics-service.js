const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.ANALYTICS_PORT || 3002;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors());
app.use(express.json());

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('public'));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (Supabase)
const pool = new Pool({
    user: 'postgres.xkwgspqwebfeteoblayu',
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',
    password: 'Gopapopa326+',
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    },
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000,
    max: 10,
    allowExitOnIdle: true
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
pool.on('connect', () => {
    console.log('üîó Analytics Service: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
    console.error('‚ùå Analytics Service: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
app.get('/api/analytics/dashboard-stats', async (req, res) => {
    try {
        const queries = {
            totalBids: 'SELECT COUNT(*) as count FROM lot_bids',
            totalLots: 'SELECT COUNT(*) as count FROM auction_lots',
            totalBidders: 'SELECT COUNT(DISTINCT bidder_login) as count FROM lot_bids',
            manualBids: 'SELECT COUNT(*) as count FROM lot_bids WHERE is_auto_bid = false',
            autobids: 'SELECT COUNT(*) as count FROM lot_bids WHERE is_auto_bid = true'
        };
        
        const results = {};
        for (const [key, query] of Object.entries(queries)) {
            const result = await pool.query(query);
            results[key] = parseInt(result.rows[0].count);
        }
        
        results.manualBidPercentage = results.totalBids > 0 
            ? Math.round((results.manualBids / results.totalBids) * 100) 
            : 0;
        
        res.json({
            success: true,
            data: results
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞',
            details: error.message 
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ä—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
app.get('/api/analytics/fast-manual-bids', async (req, res) => {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ winner_ratings
        const checkUsersQuery = `
            SELECT COUNT(*) as user_count
            FROM winner_ratings 
            WHERE fast_bids_score > 0
        `;
        
        const userCheckResult = await pool.query(checkUsersQuery);
        const userCount = parseInt(userCheckResult.rows[0].user_count);
        
        if (userCount === 0) {
            return res.json({
                success: false,
                error: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω',
                message: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∞–≤–æ–∫',
                data: [],
                count: 0
            });
        }
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${userCount} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ winner_ratings`);
        
        // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üîç –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const suspiciousUsersQuery = `
            SELECT winner_login
            FROM winner_ratings 
            WHERE fast_bids_score = 50
            LIMIT 50
        `;
        const suspiciousUsersResult = await pool.query(suspiciousUsersQuery);
        const suspiciousUsers = suspiciousUsersResult.rows.map(row => row.winner_login);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${suspiciousUsers.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        if (suspiciousUsers.length === 0) {
            return res.json({
                success: false,
                error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                message: '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–∫–æ—Ä–∏–Ω–≥–æ–º (50)',
                data: [],
                count: 0
            });
        }
        
        // –®–∞–≥ 2: –ù–∞—Ö–æ–¥–∏–º –ª–æ—Ç—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        console.log('üîç –®–∞–≥ 2: –ù–∞—Ö–æ–¥–∏–º –ª–æ—Ç—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...');
        const lotsQuery = `
            SELECT DISTINCT lot_id
            FROM lot_bids 
            WHERE bidder_login = ANY($1)
        `;
        const lotsResult = await pool.query(lotsQuery, [suspiciousUsers]);
        const lotIds = lotsResult.rows.map(row => row.lot_id);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${lotIds.length} –ª–æ—Ç–æ–≤ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏`);
        
        if (lotIds.length === 0) {
            return res.json({
                success: false,
                error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                message: '–ù–µ—Ç –ª–æ—Ç–æ–≤ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
                data: [],
                count: 0
            });
        }
        
        // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º —Ä—É—á–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ª–æ—Ç–∞–º
        console.log('üîç –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º —Ä—É—á–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ª–æ—Ç–∞–º...');
        const manualBidsQuery = `
            SELECT 
                lot_id,
                auction_number,
                lot_number,
                bidder_login,
                bid_amount,
                bid_timestamp,
                is_auto_bid
            FROM lot_bids 
            WHERE is_auto_bid = false
              AND lot_id = ANY($1)
            ORDER BY lot_id, bid_timestamp
        `;
        const manualBidsResult = await pool.query(manualBidsQuery, [lotIds]);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${manualBidsResult.rows.length} —Ä—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫`);
        
        // –®–∞–≥ 4: –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏
        console.log('üîç –®–∞–≥ 4: –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏...');
        const rows = [];
        const userStats = new Map();
        
        for (let i = 1; i < manualBidsResult.rows.length; i++) {
            const current = manualBidsResult.rows[i];
            const previous = manualBidsResult.rows[i-1];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ª–æ—Ç –∏ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (current.lot_id === previous.lot_id && current.bidder_login === previous.bidder_login) {
                const secondsBetween = (new Date(current.bid_timestamp) - new Date(previous.bid_timestamp)) / 1000;
                
                if (secondsBetween < 30) {
                    if (!userStats.has(current.bidder_login)) {
                        userStats.set(current.bidder_login, {
                            bidder_login: current.bidder_login,
                            suspicious_bids_count: 0,
                            fastest_interval: Infinity,
                            intervals: [],
                            critical_count: 0,
                            suspicious_count: 0,
                            warning_count: 0
                        });
                    }
                    
                    const stats = userStats.get(current.bidder_login);
                    stats.suspicious_bids_count++;
                    stats.intervals.push(secondsBetween);
                    stats.fastest_interval = Math.min(stats.fastest_interval, secondsBetween);
                    
                    if (secondsBetween < 1) {
                        stats.critical_count++;
                    } else if (secondsBetween < 5) {
                        stats.suspicious_count++;
                    } else {
                        stats.warning_count++;
                    }
                }
            }
        }
        
        // –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('üîç –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
        for (const [bidderLogin, stats] of userStats) {
            const avgInterval = stats.intervals.length > 0 
                ? Math.round(stats.intervals.reduce((a, b) => a + b, 0) / stats.intervals.length * 100) / 100
                : 0;
            
            let riskLevel = '–ù–û–†–ú–ê';
            if (stats.critical_count > 0) {
                riskLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (stats.suspicious_count > 5) {
                riskLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (stats.suspicious_bids_count > 10) {
                riskLevel = '–í–ù–ò–ú–ê–ù–ò–ï';
            }
            
            rows.push({
                bidder_login: bidderLogin,
                suspicious_bids_count: stats.suspicious_bids_count,
                fastest_interval: stats.fastest_interval === Infinity ? 0 : stats.fastest_interval,
                avg_interval: avgInterval,
                critical_count: stats.critical_count,
                suspicious_count: stats.suspicious_count,
                warning_count: stats.warning_count,
                risk_level: riskLevel
            });
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        rows.sort((a, b) => {
            const riskOrder = { '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û': 1, '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û': 2, '–í–ù–ò–ú–ê–ù–ò–ï': 3, '–ù–û–†–ú–ê': 4 };
            if (riskOrder[a.risk_level] !== riskOrder[b.risk_level]) {
                return riskOrder[a.risk_level] - riskOrder[b.risk_level];
            }
            return b.suspicious_bids_count - a.suspicious_bids_count;
        });
        
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±—ã—Å—Ç—Ä—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º fast_bids_score –≤ winner_ratings
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±—ã—Å—Ç—Ä—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–∏–Ω–≥...`);
        
        let updatedCount = 0;
        for (const user of rows) {
            let fastBidsScore = 0;
            
            if (user.critical_count > 0) {
                fastBidsScore = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–≤–∫–∏
            } else if (user.suspicious_count > 5) {
                fastBidsScore = 30; // –í—ã—Å–æ–∫–∏–π –±–∞–ª–ª –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
            } else if (user.suspicious_bids_count > 10) {
                fastBidsScore = 15; // –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ –º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∞–≤–æ–∫
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ winner_ratings
            await pool.query(`
                INSERT INTO winner_ratings (winner_login, fast_bids_score, last_analysis_date)
                VALUES ($1, $2, NOW())
                ON CONFLICT (winner_login) DO UPDATE SET
                    fast_bids_score = EXCLUDED.fast_bids_score,
                    last_analysis_date = EXCLUDED.last_analysis_date
            `, [user.bidder_login, fastBidsScore]);
            
            updatedCount++;
            if (updatedCount % 10 === 0) {
                console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount}/${rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
            }
        }
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ winner_ratings`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
        await pool.query(`
            UPDATE winner_ratings 
            SET suspicious_score = COALESCE(fast_bids_score, 0) + COALESCE(autobid_traps_score, 0) + COALESCE(manipulation_score, 0),
                last_analysis_date = NOW()
        `);
        console.log('‚úÖ –û–±—â–∏–π —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
        
        console.log(`‚úÖ –°–∫–æ—Ä–∏–Ω–≥ –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∞–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        res.json({
            success: true,
            data: rows,
            count: rows.length,
            message: `–û–±–Ω–æ–≤–ª–µ–Ω —Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è ${rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ä—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ä—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫',
            details: error.message 
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞
app.get('/api/analytics/autobid-traps', async (req, res) => {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞...');
        
        // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        console.log('üîç –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏...');
        const lotsWithPredictionsQuery = `
            SELECT 
                al.id as lot_id,
                al.auction_number,
                al.lot_number,
                al.winner_login,
                al.winning_bid,
                al.starting_bid,
                al.category,
                lpp.predicted_price
            FROM auction_lots al
            LEFT JOIN lot_price_predictions lpp ON al.id = lpp.lot_id
            WHERE al.winning_bid IS NOT NULL
              AND al.winning_bid > 0
              AND lpp.predicted_price IS NOT NULL
              AND lpp.predicted_price > 0
            -- LIMIT 1000  -- –£–±—Ä–∞–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ª–æ—Ç–æ–≤
        `;
        const lotsResult = await pool.query(lotsWithPredictionsQuery);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${lotsResult.rows.length} –ª–æ—Ç–æ–≤ —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏`);
        
        if (lotsResult.rows.length === 0) {
            return res.json({
                success: false,
                error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                message: '–ù–µ—Ç –ª–æ—Ç–æ–≤ —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏',
                data: [],
                count: 0
            });
        }
        
        const lotIds = lotsResult.rows.map(row => row.lot_id);
        
        // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞–≤–∫–∞–º –¥–ª—è —ç—Ç–∏—Ö –ª–æ—Ç–æ–≤
        console.log('üîç –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞–≤–∫–∞–º...');
        const bidsStatsQuery = `
            SELECT 
                lot_id,
                COUNT(*) as total_bids,
                COUNT(DISTINCT bidder_login) as unique_bidders,
                COUNT(CASE WHEN is_auto_bid = true THEN 1 END) as autobid_count,
                COUNT(CASE WHEN is_auto_bid = false THEN 1 END) as manual_bid_count,
                MIN(bid_amount) as min_bid
            FROM lot_bids 
            WHERE lot_id = ANY($1)
            GROUP BY lot_id
        `;
        const bidsStatsResult = await pool.query(bidsStatsQuery, [lotIds]);
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${bidsStatsResult.rows.length} –ª–æ—Ç–æ–≤`);
        
        // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const bidsStatsMap = new Map();
        bidsStatsResult.rows.forEach(row => {
            bidsStatsMap.set(row.lot_id, row);
        });
        
        // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–±–∏–¥
        console.log('üîç –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–±–∏–¥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏...');
        const winnerAutobidQuery = `
            SELECT DISTINCT lot_id, bidder_login
            FROM lot_bids 
            WHERE lot_id = ANY($1)
              AND is_auto_bid = true
        `;
        const winnerAutobidResult = await pool.query(winnerAutobidQuery, [lotIds]);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${winnerAutobidResult.rows.length} –∞–≤—Ç–æ–±–∏–¥–æ–≤`);
        
        // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–±–∏–¥–æ–≤
        const autobidSet = new Set();
        winnerAutobidResult.rows.forEach(row => {
            autobidSet.add(`${row.lot_id}_${row.bidder_login}`);
        });
        
        // –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–∞–∫—Ä—É—Ç—á–∏–∫–æ–≤)
        console.log('üîç –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–∞–∫—Ä—É—Ç—á–∏–∫–æ–≤)...');
        const suspiciousBiddersQuery = `
            SELECT DISTINCT winner_login
            FROM winner_ratings 
            WHERE fast_bids_score > 0
            LIMIT 100
        `;
        const suspiciousBiddersResult = await pool.query(suspiciousBiddersQuery);
        const suspiciousBidders = new Set(suspiciousBiddersResult.rows.map(row => row.winner_login));
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${suspiciousBidders.size} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–∞–∫—Ä—É—Ç—á–∏–∫–æ–≤)`);
        
        // –®–∞–≥ 4.1: –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–∞–∫—Ä—É—Ç—á–∏–∫–æ–≤
        console.log('üîç –®–∞–≥ 4.1: –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞...');
        const lotParticipantsQuery = `
            SELECT lot_id, bidder_login
            FROM lot_bids 
            WHERE lot_id = ANY($1)
        `;
        const lotParticipantsResult = await pool.query(lotParticipantsQuery, [lotIds]);
        
        // –°–æ–∑–¥–∞–µ–º Map: lot_id -> Set —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const lotParticipantsMap = new Map();
        lotParticipantsResult.rows.forEach(row => {
            if (!lotParticipantsMap.has(row.lot_id)) {
                lotParticipantsMap.set(row.lot_id, new Set());
            }
            lotParticipantsMap.get(row.lot_id).add(row.bidder_login);
        });
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–ª—è ${lotParticipantsMap.size} –ª–æ—Ç–æ–≤`);
        
        // –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('üîç –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
        const rows = [];
        
        for (const lot of lotsResult.rows) {
            const stats = bidsStatsMap.get(lot.lot_id);
            if (!stats) continue;
            
            const priceMultiplier = Math.round((lot.winning_bid / stats.min_bid) * 100) / 100;
            const predictedPriceMultiplier = Math.round((lot.winning_bid / lot.predicted_price) * 100) / 100;
            
            const winnerUsedAutobid = autobidSet.has(`${lot.lot_id}_${lot.winner_login}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–Ω–∞–∫—Ä—É—Ç—á–∏–∫–∏) –≤ —ç—Ç–æ–º –ª–æ—Ç–µ
            const lotParticipants = lotParticipantsMap.get(lot.lot_id) || new Set();
            const hasSuspiciousBidder = Array.from(lotParticipants).some(participant => 
                suspiciousBidders.has(participant)
            );
            
            // –õ–æ–≥–∏–∫–∞ –ª–æ–≤—É—à–∫–∏ –∞–≤—Ç–æ–±–∏–¥–∞:
            // 1. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∞–≤—Ç–æ–±–∏–¥ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–ø—ã—Ç–Ω—ã–º)
            // 2. –í –ª–æ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∞–∫—Ä—É—Ç—á–∏–∫–∏ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
            // 3. –¶–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω—É—é
            // 4. –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ª–æ—Ç–µ
            let riskLevel = '–ù–û–†–ú–ê';
            if (stats.total_bids >= 15 && stats.unique_bidders >= 4 && 
                winnerUsedAutobid && predictedPriceMultiplier >= 2.0 && hasSuspiciousBidder) {
                riskLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (stats.total_bids >= 10 && stats.unique_bidders >= 3 && 
                       winnerUsedAutobid && predictedPriceMultiplier >= 1.5 && hasSuspiciousBidder) {
                riskLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (stats.total_bids >= 8 && stats.unique_bidders >= 3 && 
                       winnerUsedAutobid && predictedPriceMultiplier >= 1.2 && hasSuspiciousBidder) {
                riskLevel = '–í–ù–ò–ú–ê–ù–ò–ï';
            }
            
            if (riskLevel !== '–ù–û–†–ú–ê') {
                rows.push({
                    lot_id: lot.lot_id,
                    auction_number: lot.auction_number,
                    lot_number: lot.lot_number,
                    winner_login: lot.winner_login,
                    winning_bid: lot.winning_bid,
                    predicted_price: lot.predicted_price,
                    min_bid: stats.min_bid,
                    price_multiplier: priceMultiplier,
                    predicted_price_multiplier: predictedPriceMultiplier,
                    total_bids: stats.total_bids,
                    unique_bidders: stats.unique_bidders,
                    autobid_count: stats.autobid_count,
                    manual_bid_count: stats.manual_bid_count,
                    winner_used_autobid: winnerUsedAutobid,
                    has_suspicious_bidder: hasSuspiciousBidder ? '–ï–°–¢–¨_–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô_–£–ß–ê–°–¢–ù–ò–ö' : '–ù–ï–¢_–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–•',
                    risk_level: riskLevel
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        rows.sort((a, b) => {
            const riskOrder = { '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û': 1, '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û': 2, '–í–ù–ò–ú–ê–ù–ò–ï': 3 };
            if (riskOrder[a.risk_level] !== riskOrder[b.risk_level]) {
                return riskOrder[a.risk_level] - riskOrder[b.risk_level];
            }
            return b.predicted_price_multiplier - a.predicted_price_multiplier;
        });
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${rows.length} –ª–æ—Ç–æ–≤ —Å –ª–æ–≤—É—à–∫–∞–º–∏ –∞–≤—Ç–æ–±–∏–¥–∞ (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∞–≤—Ç–æ–±–∏–¥ + —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∞–∫—Ä—É—Ç—á–∏–∫–∏)`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞...');
        
        // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ª–æ–≤—É—à–µ–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        const userTrapsMap = new Map();
        for (const lot of rows) {
            if (!userTrapsMap.has(lot.winner_login)) {
                userTrapsMap.set(lot.winner_login, {
                    count: 0,
                    max_multiplier: 0,
                    avg_multiplier: 0,
                    multipliers: []
                });
            }
            
            const userStats = userTrapsMap.get(lot.winner_login);
            userStats.count++;
            userStats.multipliers.push(lot.predicted_price_multiplier);
            userStats.max_multiplier = Math.max(userStats.max_multiplier, lot.predicted_price_multiplier);
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        for (const [user, stats] of userTrapsMap) {
            stats.avg_multiplier = stats.multipliers.reduce((a, b) => a + b, 0) / stats.multipliers.length;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–∏–Ω–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        let updatedUsers = 0;
        for (const [winnerLogin, stats] of userTrapsMap) {
            let autobidTrapsScore = 0;
            
            if (stats.max_multiplier >= 3.0) {
                autobidTrapsScore = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∑–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã
            } else if (stats.max_multiplier >= 2.0) {
                autobidTrapsScore = 30; // –í—ã—Å–æ–∫–∏–π –±–∞–ª–ª –∑–∞ –≤—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã
            } else if (stats.avg_multiplier >= 1.5) {
                autobidTrapsScore = 15; // –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ –∑–∞–≤—ã—à–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ winner_ratings
            await pool.query(`
                INSERT INTO winner_ratings (winner_login, autobid_traps_score, last_analysis_date)
                VALUES ($1, $2, NOW())
                ON CONFLICT (winner_login) DO UPDATE SET
                    autobid_traps_score = EXCLUDED.autobid_traps_score,
                    last_analysis_date = EXCLUDED.last_analysis_date
            `, [winnerLogin, autobidTrapsScore]);
            
            updatedUsers++;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await pool.query(`
            UPDATE winner_ratings 
            SET suspicious_score = COALESCE(fast_bids_score, 0) + COALESCE(autobid_traps_score, 0) + COALESCE(manipulation_score, 0),
                last_analysis_date = NOW()
        `);
        
        console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è ${updatedUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        res.json({
            success: true,
            data: rows,
            count: rows.length,
            updated_users: updatedUsers,
            message: `–ù–∞–π–¥–µ–Ω–æ ${rows.length} –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞, –æ–±–Ω–æ–≤–ª–µ–Ω —Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è ${updatedUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞',
            details: error.message 
        });
    }
});


// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏)
app.get('/api/analytics/temporal-patterns', async (req, res) => {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏)...');
        
        // –®–∞–≥ 1: –ò—â–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ª–æ—Ç–∞—Ö (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞)
        console.log('üîç –®–∞–≥ 1: –ò—â–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ª–æ—Ç–∞—Ö (‚â§10 —Å–µ–∫)...');
        const synchronousBidsQuery = `
            WITH suspicious_users AS (
                SELECT DISTINCT winner_login
                FROM winner_ratings
                WHERE suspicious_score > 30
            )
            SELECT
                lb1.bidder_login AS user1,
                lb2.bidder_login AS user2,
                lb1.bid_timestamp AS timestamp1,
                lb2.bid_timestamp AS timestamp2,
                lb1.lot_id AS lot1,
                lb2.lot_id AS lot2,
                ABS(EXTRACT(EPOCH FROM (lb2.bid_timestamp - lb1.bid_timestamp))) AS time_diff_seconds
            FROM lot_bids AS lb1
            JOIN suspicious_users su1 ON su1.winner_login = lb1.bidder_login
            JOIN lot_bids AS lb2
                ON lb2.bid_timestamp BETWEEN lb1.bid_timestamp - INTERVAL '10 seconds'
                                       AND lb1.bid_timestamp + INTERVAL '10 seconds'
            JOIN suspicious_users su2 ON su2.winner_login = lb2.bidder_login
            WHERE lb1.bidder_login <> lb2.bidder_login
                AND lb1.bidder_login < lb2.bidder_login
                AND lb1.lot_id <> lb2.lot_id
                AND lb1.bid_timestamp IS NOT NULL
                AND lb2.bid_timestamp IS NOT NULL
                AND ABS(EXTRACT(EPOCH FROM (lb2.bid_timestamp - lb1.bid_timestamp))) <= 10
            ORDER BY lb1.bid_timestamp DESC
        `;
        
        const synchronousResult = await pool.query(synchronousBidsQuery);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${synchronousResult.rows.length} —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫`);
        
        // –®–∞–≥ 2: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
        console.log('üîç –®–∞–≥ 2: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏...');
        const userGroups = new Map();
        
        synchronousResult.rows.forEach(pair => {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if (!pair.user1 || !pair.user2 || !pair.time_diff_seconds) {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é –ø–∞—Ä—É: ${pair.user1} - ${pair.user2}, time_diff: ${pair.time_diff_seconds}`);
                return;
            }
            
            const key1 = `${pair.user1}_${pair.user2}`;
            const key2 = `${pair.user2}_${pair.user1}`;
            
            if (!userGroups.has(key1) && !userGroups.has(key2)) {
                userGroups.set(key1, {
                    users: [pair.user1, pair.user2],
                    synchronous_count: 0,
                    time_diffs: [],
                    lots: new Set()
                });
            }
            
            const groupKey = userGroups.has(key1) ? key1 : key2;
            const group = userGroups.get(groupKey);
            
            group.synchronous_count++;
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (‚â§10 —Å–µ–∫ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑–µ)
            const timeDiff = parseFloat(pair.time_diff_seconds);
            if (!isNaN(timeDiff) && timeDiff >= 0 && timeDiff <= 10) {
                group.time_diffs.push(timeDiff);
            } else {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—É—é –ø–∞—Ä—É ${pair.user1}-${pair.user2}: ${pair.time_diff_seconds}—Å (—Ç–æ–ª—å–∫–æ ‚â§10—Å –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑–µ)`);
            }
            group.lots.add(pair.lot1);
            group.lots.add(pair.lot2);
        });
        
                // –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                console.log('üîç –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
                const groups = Array.from(userGroups.values()).map(group => {
                    const validTimeDiffs = group.time_diffs.filter(t => t !== null && !isNaN(t) && t >= 0 && t <= 10);
                    const avgTimeDiff = validTimeDiffs.length > 0 
                        ? Math.round(validTimeDiffs.reduce((a, b) => a + b, 0) / validTimeDiffs.length * 10) / 10
                        : 0;
                    
                    console.log(`–ì—Ä—É–ø–ø–∞ ${group.users.join(', ')}: ${group.synchronous_count} —Å—Ç–∞–≤–æ–∫, ${validTimeDiffs.length} –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤, —Å—Ä–µ–¥–Ω–∏–π: ${avgTimeDiff}—Å`);
                    console.log(`  –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: [${validTimeDiffs.slice(0, 5).join(', ')}${validTimeDiffs.length > 5 ? '...' : ''}]`);
                    
                    let suspicionLevel = '–ù–û–†–ú–ê';
                    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ª–æ—Ç–∞—Ö
                    if (group.synchronous_count >= 10 && avgTimeDiff <= 3) {
                        suspicionLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û'; // –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
                    } else if (group.synchronous_count >= 5 && avgTimeDiff <= 5) {
                        suspicionLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û'; // –º–Ω–æ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
                    } else if (group.synchronous_count >= 3) {
                        suspicionLevel = '–í–ù–ò–ú–ê–ù–ò–ï'; // –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
                    }
                    
                    return {
                        users: group.users,
                        synchronous_count: group.synchronous_count,
                        avg_time_diff: avgTimeDiff,
                        unique_lots: group.lots.size,
                        suspicion_level: suspicionLevel
                    };
                });
                
                // –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∞
                console.log('üîç –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∞...');
                const graphData = {
                    nodes: [],
                    links: []
                };
                
                // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
                const userMap = new Map();
                groups.forEach(group => {
                    group.users.forEach(user => {
                        if (!userMap.has(user)) {
                            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            const totalSynchronousBids = groups
                                .filter(g => g.users.includes(user))
                                .reduce((sum, g) => sum + g.synchronous_count, 0);
                            
                            userMap.set(user, {
                                id: user,
                                name: user,
                                totalSynchronousBids: totalSynchronousBids,
                                suspicionLevel: group.suspicion_level
                            });
                        }
                    });
                });
                
                graphData.nodes = Array.from(userMap.values());
                
                // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ (–ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
                groups.forEach(group => {
                    if (group.users.length === 2) {
                        graphData.links.push({
                            source: group.users[0],
                            target: group.users[1],
                            synchronous_count: group.synchronous_count,
                            avg_time_diff: group.avg_time_diff,
                            unique_lots: group.unique_lots
                        });
                    }
                });
                
                console.log(`‚úÖ –ì—Ä–∞—Ñ: ${graphData.nodes.length} —É–∑–ª–æ–≤, ${graphData.links.length} —Å–≤—è–∑–µ–π`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã (—É–±–∏—Ä–∞–µ–º –ù–û–†–ú–ê)
        const suspiciousGroups = groups.filter(group => group.suspicion_level !== '–ù–û–†–ú–ê');
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        suspiciousGroups.sort((a, b) => {
            const levelOrder = { '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û': 1, '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û': 2, '–í–ù–ò–ú–ê–ù–ò–ï': 3 };
            if (levelOrder[a.suspicion_level] !== levelOrder[b.suspicion_level]) {
                return levelOrder[a.suspicion_level] - levelOrder[b.suspicion_level];
            }
            return b.synchronous_count - a.synchronous_count;
        });
        
        console.log(`‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${groups.length} –≥—Ä—É–ø–ø —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–∑ –Ω–∏—Ö ${suspiciousGroups.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö`);
        
                res.json({
                    success: true,
                    data: suspiciousGroups,
                    graphData: graphData,
                    count: suspiciousGroups.length,
                    message: `–ù–∞–π–¥–µ–Ω–æ ${suspiciousGroups.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ${synchronousResult.rows.length} —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫`
                });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤',
            details: error.message 
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Å–∫–æ—Ä–∏–Ω–≥–æ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
app.get('/api/analytics/suspicious-users', async (req, res) => {
    try {
        const threshold = parseInt(req.query.threshold) || 30;
        
        const query = `
            SELECT 
                winner_login,
                suspicious_score,
                fast_bids_score,
                autobid_traps_score,
                manipulation_score,
                rating,
                category,
                total_spent,
                total_lots,
                last_analysis_date
            FROM winner_ratings
            WHERE suspicious_score >= $1
            ORDER BY suspicious_score DESC, fast_bids_score DESC, autobid_traps_score DESC
            LIMIT 100
        `;
        
        const { rows } = await pool.query(query, [threshold]);
        
        res.json({
            success: true,
            data: rows,
            count: rows.length,
            threshold: threshold
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            details: error.message 
        });
    }
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞
app.get('/api/analytics/autobid-traps-debug', async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const basicStats = await pool.query(`
            SELECT 
                COUNT(*) as total_lots,
                COUNT(CASE WHEN winning_bid IS NOT NULL THEN 1 END) as lots_with_winner,
                COUNT(CASE WHEN starting_bid IS NOT NULL AND starting_bid > 0 THEN 1 END) as lots_with_starting_bid,
                AVG(winning_bid) as avg_winning_bid,
                AVG(starting_bid) as avg_starting_bid
            FROM auction_lots
        `);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ—Ç—ã —Å –∞–≤—Ç–æ–±–∏–¥–∞–º–∏
        const autobidStats = await pool.query(`
            SELECT 
                COUNT(DISTINCT lb.lot_id) as lots_with_autobids,
                COUNT(CASE WHEN lb.is_auto_bid = true THEN 1 END) as total_autobids
            FROM lot_bids lb
            WHERE lb.is_auto_bid = true
        `);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        const activityStats = await pool.query(`
            SELECT 
                al.id,
                al.auction_number,
                al.lot_number,
                al.winner_login,
                al.winning_bid,
                al.starting_bid,
                COUNT(lb.id) as total_bids,
                COUNT(DISTINCT lb.bidder_login) as unique_bidders,
                ROUND(al.winning_bid / NULLIF(al.starting_bid, 0), 2) as price_multiplier
            FROM auction_lots al
            LEFT JOIN lot_bids lb ON al.id = lb.lot_id
            WHERE al.winning_bid IS NOT NULL
              AND al.starting_bid IS NOT NULL
              AND al.winning_bid > 0
              AND al.starting_bid > 0
            GROUP BY al.id, al.auction_number, al.lot_number, al.winner_login, 
                     al.winning_bid, al.starting_bid
            HAVING COUNT(lb.id) >= 10
            ORDER BY total_bids DESC
            LIMIT 10
        `);

        res.json({
            success: true,
            debug: {
                basic_stats: basicStats.rows[0],
                autobid_stats: autobidStats.rows[0],
                high_activity_lots: activityStats.rows
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
            details: error.message 
        });
    }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
app.get('/analytics', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'analytics.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ Analytics Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/analytics`);
});

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë Analytics Service: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    await pool.end();
    process.exit(0);
});

module.exports = app;
