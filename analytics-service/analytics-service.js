const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.ANALYTICS_PORT || 3002;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors());
app.use(express.json());

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('public'));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (Supabase)
const pool = new Pool({
    user: 'postgres.xkwgspqwebfeteoblayu',
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',
    password: 'Gopapopa326+',
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    },
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000,
    max: 10,
    allowExitOnIdle: true
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
pool.on('connect', () => {
    console.log('üîó Analytics Service: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
    console.error('‚ùå Analytics Service: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
app.get('/api/analytics/dashboard-stats', async (req, res) => {
    try {
        const queries = {
            totalBids: 'SELECT COUNT(*) as count FROM lot_bids',
            totalLots: 'SELECT COUNT(*) as count FROM auction_lots',
            totalBidders: 'SELECT COUNT(DISTINCT bidder_login) as count FROM lot_bids',
            manualBids: 'SELECT COUNT(*) as count FROM lot_bids WHERE is_auto_bid = false',
            autobids: 'SELECT COUNT(*) as count FROM lot_bids WHERE is_auto_bid = true'
        };
        
        const results = {};
        for (const [key, query] of Object.entries(queries)) {
            const result = await pool.query(query);
            results[key] = parseInt(result.rows[0].count);
        }
        
        results.manualBidPercentage = results.totalBids > 0 
            ? Math.round((results.manualBids / results.totalBids) * 100) 
            : 0;
        
        res.json({
            success: true,
            data: results
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞',
            details: error.message 
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ä—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
app.get('/api/analytics/fast-manual-bids', async (req, res) => {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ winner_ratings
        const checkUsersQuery = `
            SELECT COUNT(*) as user_count
            FROM winner_ratings 
            WHERE fast_bids_score > 0
        `;
        
        const userCheckResult = await pool.query(checkUsersQuery);
        const userCount = parseInt(userCheckResult.rows[0].user_count);
        
        if (userCount === 0) {
            return res.json({
                success: false,
                error: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω',
                message: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∞–≤–æ–∫',
                data: [],
                count: 0
            });
        }
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${userCount} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ winner_ratings`);
        
        // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üîç –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const suspiciousUsersQuery = `
            SELECT winner_login
            FROM winner_ratings 
            WHERE fast_bids_score = 50
            LIMIT 50
        `;
        const suspiciousUsersResult = await pool.query(suspiciousUsersQuery);
        const suspiciousUsers = suspiciousUsersResult.rows.map(row => row.winner_login);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${suspiciousUsers.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        if (suspiciousUsers.length === 0) {
            return res.json({
                success: false,
                error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                message: '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–∫–æ—Ä–∏–Ω–≥–æ–º (50)',
                data: [],
                count: 0
            });
        }
        
        // –®–∞–≥ 2: –ù–∞—Ö–æ–¥–∏–º –ª–æ—Ç—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        console.log('üîç –®–∞–≥ 2: –ù–∞—Ö–æ–¥–∏–º –ª–æ—Ç—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...');
        const lotsQuery = `
            SELECT DISTINCT lot_id
            FROM lot_bids 
            WHERE bidder_login = ANY($1)
        `;
        const lotsResult = await pool.query(lotsQuery, [suspiciousUsers]);
        const lotIds = lotsResult.rows.map(row => row.lot_id);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${lotIds.length} –ª–æ—Ç–æ–≤ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏`);
        
        if (lotIds.length === 0) {
            return res.json({
                success: false,
                error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                message: '–ù–µ—Ç –ª–æ—Ç–æ–≤ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
                data: [],
                count: 0
            });
        }
        
        // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º —Ä—É—á–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ª–æ—Ç–∞–º
        console.log('üîç –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º —Ä—É—á–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ª–æ—Ç–∞–º...');
        const manualBidsQuery = `
            SELECT 
                lot_id,
                auction_number,
                lot_number,
                bidder_login,
                bid_amount,
                bid_timestamp,
                is_auto_bid
            FROM lot_bids 
            WHERE is_auto_bid = false
              AND lot_id = ANY($1)
            ORDER BY lot_id, bid_timestamp
        `;
        const manualBidsResult = await pool.query(manualBidsQuery, [lotIds]);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${manualBidsResult.rows.length} —Ä—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫`);
        
        // –®–∞–≥ 4: –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏
        console.log('üîç –®–∞–≥ 4: –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å—Ç–∞–≤–∫–∞–º–∏...');
        const rows = [];
        const userStats = new Map();
        
        for (let i = 1; i < manualBidsResult.rows.length; i++) {
            const current = manualBidsResult.rows[i];
            const previous = manualBidsResult.rows[i-1];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ª–æ—Ç –∏ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (current.lot_id === previous.lot_id && current.bidder_login === previous.bidder_login) {
                const secondsBetween = (new Date(current.bid_timestamp) - new Date(previous.bid_timestamp)) / 1000;
                
                if (secondsBetween < 30) {
                    if (!userStats.has(current.bidder_login)) {
                        userStats.set(current.bidder_login, {
                            bidder_login: current.bidder_login,
                            suspicious_bids_count: 0,
                            fastest_interval: Infinity,
                            intervals: [],
                            critical_count: 0,
                            suspicious_count: 0,
                            warning_count: 0
                        });
                    }
                    
                    const stats = userStats.get(current.bidder_login);
                    stats.suspicious_bids_count++;
                    stats.intervals.push(secondsBetween);
                    stats.fastest_interval = Math.min(stats.fastest_interval, secondsBetween);
                    
                    if (secondsBetween < 1) {
                        stats.critical_count++;
                    } else if (secondsBetween < 5) {
                        stats.suspicious_count++;
                    } else {
                        stats.warning_count++;
                    }
                }
            }
        }
        
        // –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('üîç –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
        for (const [bidderLogin, stats] of userStats) {
            const avgInterval = stats.intervals.length > 0 
                ? Math.round(stats.intervals.reduce((a, b) => a + b, 0) / stats.intervals.length * 100) / 100
                : 0;
            
            let riskLevel = '–ù–û–†–ú–ê';
            if (stats.critical_count > 0) {
                riskLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (stats.suspicious_count > 5) {
                riskLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (stats.suspicious_bids_count > 10) {
                riskLevel = '–í–ù–ò–ú–ê–ù–ò–ï';
            }
            
            rows.push({
                bidder_login: bidderLogin,
                suspicious_bids_count: stats.suspicious_bids_count,
                fastest_interval: stats.fastest_interval === Infinity ? 0 : stats.fastest_interval,
                avg_interval: avgInterval,
                critical_count: stats.critical_count,
                suspicious_count: stats.suspicious_count,
                warning_count: stats.warning_count,
                risk_level: riskLevel
            });
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        rows.sort((a, b) => {
            const riskOrder = { '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û': 1, '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û': 2, '–í–ù–ò–ú–ê–ù–ò–ï': 3, '–ù–û–†–ú–ê': 4 };
            if (riskOrder[a.risk_level] !== riskOrder[b.risk_level]) {
                return riskOrder[a.risk_level] - riskOrder[b.risk_level];
            }
            return b.suspicious_bids_count - a.suspicious_bids_count;
        });
        
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±—ã—Å—Ç—Ä—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º fast_bids_score –≤ winner_ratings
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±—ã—Å—Ç—Ä—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–∏–Ω–≥...`);
        
        let updatedCount = 0;
        for (const user of rows) {
            let fastBidsScore = 0;
            
            if (user.critical_count > 0) {
                fastBidsScore = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–≤–∫–∏
            } else if (user.suspicious_count > 5) {
                fastBidsScore = 30; // –í—ã—Å–æ–∫–∏–π –±–∞–ª–ª –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
            } else if (user.suspicious_bids_count > 10) {
                fastBidsScore = 15; // –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ –º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∞–≤–æ–∫
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ winner_ratings
            await pool.query(`
                INSERT INTO winner_ratings (winner_login, fast_bids_score, last_analysis_date)
                VALUES ($1, $2, NOW())
                ON CONFLICT (winner_login) DO UPDATE SET
                    fast_bids_score = EXCLUDED.fast_bids_score,
                    last_analysis_date = EXCLUDED.last_analysis_date
            `, [user.bidder_login, fastBidsScore]);
            
            updatedCount++;
            if (updatedCount % 10 === 0) {
                console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount}/${rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
            }
        }
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ winner_ratings`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
        await pool.query(`
            UPDATE winner_ratings 
            SET suspicious_score = COALESCE(fast_bids_score, 0) + COALESCE(autobid_traps_score, 0) + COALESCE(manipulation_score, 0),
                last_analysis_date = NOW()
        `);
        console.log('‚úÖ –û–±—â–∏–π —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
        
        console.log(`‚úÖ –°–∫–æ—Ä–∏–Ω–≥ –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∞–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        res.json({
            success: true,
            data: rows,
            count: rows.length,
            message: `–û–±–Ω–æ–≤–ª–µ–Ω —Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è ${rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ä—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ä—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫',
            details: error.message 
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞
app.get('/api/analytics/autobid-traps', async (req, res) => {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞...');
        
        // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        console.log('üîç –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏...');
        const lotsWithPredictionsQuery = `
            SELECT 
                al.id as lot_id,
                al.auction_number,
                al.lot_number,
                al.winner_login,
                al.winning_bid,
                al.starting_bid,
                al.category,
                lpp.predicted_price
            FROM auction_lots al
            LEFT JOIN lot_price_predictions lpp ON al.id = lpp.lot_id
            WHERE al.winning_bid IS NOT NULL
              AND al.winning_bid > 0
              AND lpp.predicted_price IS NOT NULL
              AND lpp.predicted_price > 0
            -- LIMIT 1000  -- –£–±—Ä–∞–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ª–æ—Ç–æ–≤
        `;
        const lotsResult = await pool.query(lotsWithPredictionsQuery);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${lotsResult.rows.length} –ª–æ—Ç–æ–≤ —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏`);
        
        if (lotsResult.rows.length === 0) {
            return res.json({
                success: false,
                error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                message: '–ù–µ—Ç –ª–æ—Ç–æ–≤ —Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏',
                data: [],
                count: 0
            });
        }
        
        const lotIds = lotsResult.rows.map(row => row.lot_id);
        
        // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞–≤–∫–∞–º –¥–ª—è —ç—Ç–∏—Ö –ª–æ—Ç–æ–≤
        console.log('üîç –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞–≤–∫–∞–º...');
        const bidsStatsQuery = `
            SELECT 
                lot_id,
                COUNT(*) as total_bids,
                COUNT(DISTINCT bidder_login) as unique_bidders,
                COUNT(CASE WHEN is_auto_bid = true THEN 1 END) as autobid_count,
                COUNT(CASE WHEN is_auto_bid = false THEN 1 END) as manual_bid_count,
                MIN(bid_amount) as min_bid
            FROM lot_bids 
            WHERE lot_id = ANY($1)
            GROUP BY lot_id
        `;
        const bidsStatsResult = await pool.query(bidsStatsQuery, [lotIds]);
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${bidsStatsResult.rows.length} –ª–æ—Ç–æ–≤`);
        
        // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const bidsStatsMap = new Map();
        bidsStatsResult.rows.forEach(row => {
            bidsStatsMap.set(row.lot_id, row);
        });
        
        // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–±–∏–¥
        console.log('üîç –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–±–∏–¥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏...');
        const winnerAutobidQuery = `
            SELECT DISTINCT lot_id, bidder_login
            FROM lot_bids 
            WHERE lot_id = ANY($1)
              AND is_auto_bid = true
        `;
        const winnerAutobidResult = await pool.query(winnerAutobidQuery, [lotIds]);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${winnerAutobidResult.rows.length} –∞–≤—Ç–æ–±–∏–¥–æ–≤`);
        
        // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–±–∏–¥–æ–≤
        const autobidSet = new Set();
        winnerAutobidResult.rows.forEach(row => {
            autobidSet.add(`${row.lot_id}_${row.bidder_login}`);
        });
        
        // –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–∞–∫—Ä—É—Ç—á–∏–∫–æ–≤)
        console.log('üîç –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–∞–∫—Ä—É—Ç—á–∏–∫–æ–≤)...');
        const suspiciousBiddersQuery = `
            SELECT DISTINCT winner_login
            FROM winner_ratings 
            WHERE fast_bids_score > 0
            LIMIT 100
        `;
        const suspiciousBiddersResult = await pool.query(suspiciousBiddersQuery);
        const suspiciousBidders = new Set(suspiciousBiddersResult.rows.map(row => row.winner_login));
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${suspiciousBidders.size} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–∞–∫—Ä—É—Ç—á–∏–∫–æ–≤)`);
        
        // –®–∞–≥ 4.1: –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–∞–∫—Ä—É—Ç—á–∏–∫–æ–≤
        console.log('üîç –®–∞–≥ 4.1: –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞...');
        const lotParticipantsQuery = `
            SELECT lot_id, bidder_login
            FROM lot_bids 
            WHERE lot_id = ANY($1)
        `;
        const lotParticipantsResult = await pool.query(lotParticipantsQuery, [lotIds]);
        
        // –°–æ–∑–¥–∞–µ–º Map: lot_id -> Set —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const lotParticipantsMap = new Map();
        lotParticipantsResult.rows.forEach(row => {
            if (!lotParticipantsMap.has(row.lot_id)) {
                lotParticipantsMap.set(row.lot_id, new Set());
            }
            lotParticipantsMap.get(row.lot_id).add(row.bidder_login);
        });
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–ª—è ${lotParticipantsMap.size} –ª–æ—Ç–æ–≤`);
        
        // –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('üîç –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
        const rows = [];
        
        for (const lot of lotsResult.rows) {
            const stats = bidsStatsMap.get(lot.lot_id);
            if (!stats) continue;
            
            const priceMultiplier = Math.round((lot.winning_bid / stats.min_bid) * 100) / 100;
            const predictedPriceMultiplier = Math.round((lot.winning_bid / lot.predicted_price) * 100) / 100;
            
            const winnerUsedAutobid = autobidSet.has(`${lot.lot_id}_${lot.winner_login}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–Ω–∞–∫—Ä—É—Ç—á–∏–∫–∏) –≤ —ç—Ç–æ–º –ª–æ—Ç–µ
            const lotParticipants = lotParticipantsMap.get(lot.lot_id) || new Set();
            const hasSuspiciousBidder = Array.from(lotParticipants).some(participant => 
                suspiciousBidders.has(participant)
            );
            
            // –õ–æ–≥–∏–∫–∞ –ª–æ–≤—É—à–∫–∏ –∞–≤—Ç–æ–±–∏–¥–∞:
            // 1. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∞–≤—Ç–æ–±–∏–¥ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–ø—ã—Ç–Ω—ã–º)
            // 2. –í –ª–æ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∞–∫—Ä—É—Ç—á–∏–∫–∏ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
            // 3. –¶–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω—É—é
            // 4. –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ª–æ—Ç–µ
            let riskLevel = '–ù–û–†–ú–ê';
            if (stats.total_bids >= 15 && stats.unique_bidders >= 4 && 
                winnerUsedAutobid && predictedPriceMultiplier >= 2.0 && hasSuspiciousBidder) {
                riskLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (stats.total_bids >= 10 && stats.unique_bidders >= 3 && 
                       winnerUsedAutobid && predictedPriceMultiplier >= 1.5 && hasSuspiciousBidder) {
                riskLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (stats.total_bids >= 8 && stats.unique_bidders >= 3 && 
                       winnerUsedAutobid && predictedPriceMultiplier >= 1.2 && hasSuspiciousBidder) {
                riskLevel = '–í–ù–ò–ú–ê–ù–ò–ï';
            }
            
            if (riskLevel !== '–ù–û–†–ú–ê') {
                rows.push({
                    lot_id: lot.lot_id,
                    auction_number: lot.auction_number,
                    lot_number: lot.lot_number,
                    winner_login: lot.winner_login,
                    winning_bid: lot.winning_bid,
                    predicted_price: lot.predicted_price,
                    min_bid: stats.min_bid,
                    price_multiplier: priceMultiplier,
                    predicted_price_multiplier: predictedPriceMultiplier,
                    total_bids: stats.total_bids,
                    unique_bidders: stats.unique_bidders,
                    autobid_count: stats.autobid_count,
                    manual_bid_count: stats.manual_bid_count,
                    winner_used_autobid: winnerUsedAutobid,
                    has_suspicious_bidder: hasSuspiciousBidder ? '–ï–°–¢–¨_–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô_–£–ß–ê–°–¢–ù–ò–ö' : '–ù–ï–¢_–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–•',
                    risk_level: riskLevel
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        rows.sort((a, b) => {
            const riskOrder = { '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û': 1, '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û': 2, '–í–ù–ò–ú–ê–ù–ò–ï': 3 };
            if (riskOrder[a.risk_level] !== riskOrder[b.risk_level]) {
                return riskOrder[a.risk_level] - riskOrder[b.risk_level];
            }
            return b.predicted_price_multiplier - a.predicted_price_multiplier;
        });
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${rows.length} –ª–æ—Ç–æ–≤ —Å –ª–æ–≤—É—à–∫–∞–º–∏ –∞–≤—Ç–æ–±–∏–¥–∞ (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∞–≤—Ç–æ–±–∏–¥ + —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –Ω–∞–∫—Ä—É—Ç—á–∏–∫–∏)`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞...');
        
        // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ª–æ–≤—É—à–µ–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        const userTrapsMap = new Map();
        for (const lot of rows) {
            if (!userTrapsMap.has(lot.winner_login)) {
                userTrapsMap.set(lot.winner_login, {
                    count: 0,
                    max_multiplier: 0,
                    avg_multiplier: 0,
                    multipliers: []
                });
            }
            
            const userStats = userTrapsMap.get(lot.winner_login);
            userStats.count++;
            userStats.multipliers.push(lot.predicted_price_multiplier);
            userStats.max_multiplier = Math.max(userStats.max_multiplier, lot.predicted_price_multiplier);
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        for (const [user, stats] of userTrapsMap) {
            stats.avg_multiplier = stats.multipliers.reduce((a, b) => a + b, 0) / stats.multipliers.length;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–∏–Ω–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        let updatedUsers = 0;
        for (const [winnerLogin, stats] of userTrapsMap) {
            let autobidTrapsScore = 0;
            
            if (stats.max_multiplier >= 3.0) {
                autobidTrapsScore = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∑–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã
            } else if (stats.max_multiplier >= 2.0) {
                autobidTrapsScore = 30; // –í—ã—Å–æ–∫–∏–π –±–∞–ª–ª –∑–∞ –≤—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã
            } else if (stats.avg_multiplier >= 1.5) {
                autobidTrapsScore = 15; // –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ –∑–∞–≤—ã—à–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ winner_ratings
            await pool.query(`
                INSERT INTO winner_ratings (winner_login, autobid_traps_score, last_analysis_date)
                VALUES ($1, $2, NOW())
                ON CONFLICT (winner_login) DO UPDATE SET
                    autobid_traps_score = EXCLUDED.autobid_traps_score,
                    last_analysis_date = EXCLUDED.last_analysis_date
            `, [winnerLogin, autobidTrapsScore]);
            
            updatedUsers++;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await pool.query(`
            UPDATE winner_ratings 
            SET suspicious_score = COALESCE(fast_bids_score, 0) + COALESCE(autobid_traps_score, 0) + COALESCE(manipulation_score, 0),
                last_analysis_date = NOW()
        `);
        
        console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è ${updatedUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        res.json({
            success: true,
            data: rows,
            count: rows.length,
            updated_users: updatedUsers,
            message: `–ù–∞–π–¥–µ–Ω–æ ${rows.length} –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞, –æ–±–Ω–æ–≤–ª–µ–Ω —Å–∫–æ—Ä–∏–Ω–≥ –¥–ª—è ${updatedUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞',
            details: error.message 
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤ –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
app.get('/api/analytics/temporal-pattern-lots', async (req, res) => {
    try {
        const { user1, user2 } = req.query;
        
        if (!user1 || !user2) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å user1 –∏ user2'
            });
        }
        
        console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ—Ç—ã –¥–ª—è –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${user1} ‚Üî ${user2}`);
        
        const lotsQuery = `
            WITH suspicious_users AS (
                SELECT DISTINCT winner_login
                FROM winner_ratings
                WHERE suspicious_score > 40
            ),
            lb1 AS (
                SELECT b.bidder_login, b.bid_timestamp, b.lot_id
                FROM lot_bids b
                JOIN suspicious_users su ON su.winner_login = b.bidder_login
                WHERE b.is_auto_bid = false
                    AND b.bid_timestamp IS NOT NULL
                    AND b.bidder_login = $1
            ),
            synchronous_pairs AS (
                SELECT
                    l1.lot_id,
                    l1.bidder_login AS user1,
                    l2.bidder_login AS user2,
                    l1.bid_timestamp AS timestamp1,
                    l2.bid_timestamp AS timestamp2,
                    ABS(EXTRACT(EPOCH FROM (l2.bid_timestamp - l1.bid_timestamp))) AS time_diff_seconds
                FROM lb1 l1
                CROSS JOIN LATERAL (
                    SELECT b.bidder_login, b.bid_timestamp, b.lot_id
                    FROM lot_bids b
                    JOIN suspicious_users su2 ON su2.winner_login = b.bidder_login
                    WHERE b.is_auto_bid = false
                        AND b.bid_timestamp BETWEEN l1.bid_timestamp - INTERVAL '2 seconds'
                                               AND l1.bid_timestamp + INTERVAL '2 seconds'
                        AND b.bid_timestamp IS NOT NULL
                        AND b.bidder_login = $2
                        AND b.lot_id <> l1.lot_id
                ) l2
            )
            SELECT DISTINCT
                sp.lot_id,
                sp.user1,
                sp.user2,
                MIN(sp.timestamp1) AS timestamp1,
                MIN(sp.timestamp2) AS timestamp2,
                MIN(sp.time_diff_seconds) AS time_diff_seconds,
                al.auction_number,
                al.winning_bid,
                al.winner_login,
                al.category
            FROM synchronous_pairs sp
            LEFT JOIN auction_lots al ON al.id = sp.lot_id
            GROUP BY sp.lot_id, sp.user1, sp.user2, al.auction_number, al.winning_bid, al.winner_login, al.category
            ORDER BY MIN(sp.timestamp1) DESC
        `;
        
        const result = await pool.query(lotsQuery, [user1, user2]);
        
        res.json({
            success: true,
            data: result.rows,
            count: result.rows.length,
            message: `–ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ª–æ—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—ã ${user1} ‚Üî ${user2}`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–æ–≤ –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–æ–≤ –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            details: error.message
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏)
app.get('/api/analytics/temporal-patterns', async (req, res) => {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏)...');
        
        // –®–∞–≥ 1: –ò—â–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –†–£–ß–ù–´–ï —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ª–æ—Ç–∞—Ö (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å Supabase)
        console.log('üîç –®–∞–≥ 1: –ò—â–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –†–£–ß–ù–´–ï —Å—Ç–∞–≤–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ª–æ—Ç–∞—Ö (‚â§2 —Å–µ–∫, –±–µ–∑ –∞–≤—Ç–æ–±–∏–¥–æ–≤)...');
        const synchronousBidsQuery = `
            WITH suspicious_users AS (
                SELECT DISTINCT winner_login
                FROM winner_ratings
                WHERE suspicious_score > 40
            ),
            lb1 AS (
                SELECT b.*
                FROM lot_bids b
                JOIN suspicious_users su ON su.winner_login = b.bidder_login
                WHERE b.is_auto_bid = false
                    AND b.bid_timestamp IS NOT NULL
            )
            SELECT
                l1.bidder_login AS user1,
                l2.bidder_login AS user2,
                l1.bid_timestamp AS timestamp1,
                l2.bid_timestamp AS timestamp2,
                l1.lot_id AS lot1,
                l2.lot_id AS lot2,
                ABS(EXTRACT(EPOCH FROM (l2.bid_timestamp - l1.bid_timestamp))) AS time_diff_seconds
            FROM lb1 l1
            CROSS JOIN LATERAL (
                SELECT b.*
                FROM lot_bids b
                JOIN suspicious_users su2 ON su2.winner_login = b.bidder_login
                WHERE b.is_auto_bid = false
                    AND b.bid_timestamp BETWEEN l1.bid_timestamp - INTERVAL '2 seconds'
                                           AND l1.bid_timestamp + INTERVAL '2 seconds'
                    AND b.bid_timestamp IS NOT NULL
                    AND b.bidder_login > l1.bidder_login
                    AND b.lot_id <> l1.lot_id
            ) l2
            ORDER BY l1.bid_timestamp DESC
        `;
        
        const synchronousResult = await pool.query(synchronousBidsQuery);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${synchronousResult.rows.length} —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫`);
        
        // –®–∞–≥ 2: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
        console.log('üîç –®–∞–≥ 2: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏...');
        const userGroups = new Map();
        
        synchronousResult.rows.forEach(pair => {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if (!pair.user1 || !pair.user2 || !pair.time_diff_seconds) {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é –ø–∞—Ä—É: ${pair.user1} - ${pair.user2}, time_diff: ${pair.time_diff_seconds}`);
                return;
            }
            
            const key1 = `${pair.user1}_${pair.user2}`;
            const key2 = `${pair.user2}_${pair.user1}`;
            
            if (!userGroups.has(key1) && !userGroups.has(key2)) {
                userGroups.set(key1, {
                    users: [pair.user1, pair.user2],
                    synchronous_count: 0,
                    time_diffs: [],
                    lots: new Set()
                });
            }
            
            const groupKey = userGroups.has(key1) ? key1 : key2;
            const group = userGroups.get(groupKey);
            
            group.synchronous_count++;
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (‚â§2 —Å–µ–∫ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É)
            const timeDiff = parseFloat(pair.time_diff_seconds);
            if (!isNaN(timeDiff) && timeDiff >= 0 && timeDiff <= 2) {
                group.time_diffs.push(timeDiff);
            } else {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—É—é –ø–∞—Ä—É ${pair.user1}-${pair.user2}: ${pair.time_diff_seconds}—Å (—Ç–æ–ª—å–∫–æ ‚â§2—Å –ø–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É)`);
            }
            group.lots.add(pair.lot1);
            group.lots.add(pair.lot2);
        });
        
                // –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                console.log('üîç –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
                const groups = Array.from(userGroups.values()).map(group => {
                    const validTimeDiffs = group.time_diffs.filter(t => t !== null && !isNaN(t) && t >= 0 && t <= 2);
                    const avgTimeDiff = validTimeDiffs.length > 0 
                        ? Math.round(validTimeDiffs.reduce((a, b) => a + b, 0) / validTimeDiffs.length * 10) / 10
                        : 0;
                    
                    console.log(`–ì—Ä—É–ø–ø–∞ ${group.users.join(', ')}: ${group.synchronous_count} —Å—Ç–∞–≤–æ–∫, ${validTimeDiffs.length} –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤, —Å—Ä–µ–¥–Ω–∏–π: ${avgTimeDiff}—Å`);
                    console.log(`  –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: [${validTimeDiffs.slice(0, 5).join(', ')}${validTimeDiffs.length > 5 ? '...' : ''}]`);
                    
                    let suspicionLevel = '–ù–û–†–ú–ê';
                    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ª–æ—Ç–∞—Ö (‚â§2 —Å–µ–∫)
                    if (group.synchronous_count >= 5 && avgTimeDiff <= 1) {
                        suspicionLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û'; // –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
                    } else if (group.synchronous_count >= 3 && avgTimeDiff <= 2) {
                        suspicionLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û'; // –±—ã—Å—Ç—Ä—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
                    } else if (group.synchronous_count >= 2) {
                        suspicionLevel = '–í–ù–ò–ú–ê–ù–ò–ï'; // –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
                    }
                    
                    return {
                        users: group.users,
                        synchronous_count: group.synchronous_count,
                        avg_time_diff: avgTimeDiff,
                        unique_lots: group.lots.size,
                        suspicion_level: suspicionLevel
                    };
                });
                
                // –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∞
                console.log('üîç –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∞...');
                const graphData = {
                    nodes: [],
                    links: []
                };
                
                // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ (–ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) —Å–Ω–∞—á–∞–ª–∞
                groups.forEach(group => {
                    if (group.users.length === 2) {
                        graphData.links.push({
                            source: group.users[0],
                            target: group.users[1],
                            synchronous_count: group.synchronous_count,
                            avg_time_diff: group.avg_time_diff,
                            unique_lots: group.unique_lots
                        });
                    }
                });
                
                // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å–≤—è–∑–∏
                const userMap = new Map();
                const usersWithLinks = new Set();
                
                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Å–≤—è–∑—è—Ö
                graphData.links.forEach(link => {
                    usersWithLinks.add(link.source);
                    usersWithLinks.add(link.target);
                });
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                const userLogins = Array.from(usersWithLinks);
                const userRatingsQuery = `
                    SELECT winner_login, suspicious_score
                    FROM winner_ratings 
                    WHERE winner_login = ANY($1)
                `;
                const userRatingsResult = await pool.query(userRatingsQuery, [userLogins]);
                const userRatingsMap = new Map();
                userRatingsResult.rows.forEach(row => {
                    userRatingsMap.set(row.winner_login, row.suspicious_score);
                });

                // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å–≤—è–∑—è–º–∏
                usersWithLinks.forEach(user => {
                    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã, –≥–¥–µ —É—á–∞—Å—Ç–≤—É–µ—Ç —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    const userGroups = groups.filter(g => g.users.includes(user));
                    
                    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, –∞ –Ω–µ —Å—É–º–º–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
                    const totalSynchronousBids = userGroups.length;
                    
                    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    let suspicionLevel = '–ù–û–†–ú–ê';
                    const suspiciousScore = userRatingsMap.get(user);
                    if (suspiciousScore && suspiciousScore > 0) {
                        if (suspiciousScore >= 80) {
                            suspicionLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
                        } else if (suspiciousScore >= 50) {
                            suspicionLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
                        } else if (suspiciousScore >= 30) {
                            suspicionLevel = '–í–ù–ò–ú–ê–ù–ò–ï';
                        } else {
                            suspicionLevel = '–ù–û–†–ú–ê';
                        }
                    }
                    
                    userMap.set(user, {
                        id: user,
                        name: user,
                        totalSynchronousBids: totalSynchronousBids,
                        suspicionLevel: suspicionLevel
                    });
                });
                
                graphData.nodes = Array.from(userMap.values());
                
                console.log(`‚úÖ –ì—Ä–∞—Ñ: ${graphData.nodes.length} —É–∑–ª–æ–≤, ${graphData.links.length} —Å–≤—è–∑–µ–π`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã (—É–±–∏—Ä–∞–µ–º –ù–û–†–ú–ê)
        const suspiciousGroups = groups.filter(group => group.suspicion_level !== '–ù–û–†–ú–ê');
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        suspiciousGroups.sort((a, b) => {
            const levelOrder = { '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û': 1, '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û': 2, '–í–ù–ò–ú–ê–ù–ò–ï': 3 };
            if (levelOrder[a.suspicion_level] !== levelOrder[b.suspicion_level]) {
                return levelOrder[a.suspicion_level] - levelOrder[b.suspicion_level];
            }
            return b.synchronous_count - a.synchronous_count;
        });
        
        console.log(`‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${groups.length} –≥—Ä—É–ø–ø —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–∑ –Ω–∏—Ö ${suspiciousGroups.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö`);
        
                res.json({
                    success: true,
                    data: suspiciousGroups,
                    graphData: graphData,
                    count: suspiciousGroups.length,
                    message: `–ù–∞–π–¥–µ–Ω–æ ${suspiciousGroups.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ${synchronousResult.rows.length} —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫`
                });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤',
            details: error.message 
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Å–∫–æ—Ä–∏–Ω–≥–æ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
app.get('/api/analytics/suspicious-users', async (req, res) => {
    try {
        const threshold = parseInt(req.query.threshold) || 30;
        
        const query = `
            SELECT 
                winner_login,
                suspicious_score,
                fast_bids_score,
                autobid_traps_score,
                manipulation_score,
                rating,
                category,
                total_spent,
                total_lots,
                last_analysis_date
            FROM winner_ratings
            WHERE suspicious_score >= $1
            ORDER BY suspicious_score DESC, fast_bids_score DESC, autobid_traps_score DESC
            LIMIT 100
        `;
        
        const { rows } = await pool.query(query, [threshold]);
        
        res.json({
            success: true,
            data: rows,
            count: rows.length,
            threshold: threshold
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            details: error.message 
        });
    }
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞
app.get('/api/analytics/autobid-traps-debug', async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const basicStats = await pool.query(`
            SELECT 
                COUNT(*) as total_lots,
                COUNT(CASE WHEN winning_bid IS NOT NULL THEN 1 END) as lots_with_winner,
                COUNT(CASE WHEN starting_bid IS NOT NULL AND starting_bid > 0 THEN 1 END) as lots_with_starting_bid,
                AVG(winning_bid) as avg_winning_bid,
                AVG(starting_bid) as avg_starting_bid
            FROM auction_lots
        `);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ—Ç—ã —Å –∞–≤—Ç–æ–±–∏–¥–∞–º–∏
        const autobidStats = await pool.query(`
            SELECT 
                COUNT(DISTINCT lb.lot_id) as lots_with_autobids,
                COUNT(CASE WHEN lb.is_auto_bid = true THEN 1 END) as total_autobids
            FROM lot_bids lb
            WHERE lb.is_auto_bid = true
        `);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        const activityStats = await pool.query(`
            SELECT 
                al.id,
                al.auction_number,
                al.lot_number,
                al.winner_login,
                al.winning_bid,
                al.starting_bid,
                COUNT(lb.id) as total_bids,
                COUNT(DISTINCT lb.bidder_login) as unique_bidders,
                ROUND(al.winning_bid / NULLIF(al.starting_bid, 0), 2) as price_multiplier
            FROM auction_lots al
            LEFT JOIN lot_bids lb ON al.id = lb.lot_id
            WHERE al.winning_bid IS NOT NULL
              AND al.starting_bid IS NOT NULL
              AND al.winning_bid > 0
              AND al.starting_bid > 0
            GROUP BY al.id, al.auction_number, al.lot_number, al.winner_login, 
                     al.winning_bid, al.starting_bid
            HAVING COUNT(lb.id) >= 10
            ORDER BY total_bids DESC
            LIMIT 10
        `);

        res.json({
            success: true,
            debug: {
                basic_stats: basicStats.rows[0],
                autobid_stats: autobidStats.rows[0],
                high_activity_lots: activityStats.rows
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ª–æ–≤—É—à–µ–∫ –∞–≤—Ç–æ–±–∏–¥–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
            details: error.message 
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä—É–≥–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ (–ì–∏–ø–æ—Ç–µ–∑–∞ 1)
app.get('/api/analytics/circular-buyers', async (req, res) => {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫—Ä—É–≥–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ (—Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏)...');
        
        const minPurchases = parseInt(req.query.min_purchases) || 3;
        const months = parseInt(req.query.months) || 6;
        
        // –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫—É–ø–∞—é—â–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
        console.log(`üîç –®–∞–≥ 1: –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ${minPurchases}+ –ø–æ–∫—É–ø–∫–∞–º–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –º–æ–Ω–µ—Ç –∑–∞ ${months} –º–µ—Å—è—Ü–µ–≤...`);
        const circularBuyersQuery = `
            SELECT 
                al.winner_login,
                al.coin_description,
                al.year,
                al.condition,
                COUNT(*) as purchase_count,
                AVG(al.winning_bid) as avg_price,
                MIN(al.winning_bid) as min_price,
                MAX(al.winning_bid) as max_price,
                STDDEV(al.winning_bid) / NULLIF(AVG(al.winning_bid), 0) * 100 as price_variance_pct,
                AVG(al.bids_count) as avg_competition,
                EXTRACT(DAYS FROM MAX(al.auction_end_date) - MIN(al.auction_end_date)) / 7 as weeks_span,
                STRING_AGG(DISTINCT al.auction_number::text, ', ' ORDER BY al.auction_number::text) as auctions,
                MIN(al.auction_end_date) as first_purchase,
                MAX(al.auction_end_date) as last_purchase
            FROM auction_lots al
            WHERE al.winner_login IS NOT NULL
              AND al.winning_bid IS NOT NULL
              AND al.winning_bid > 0
              AND al.auction_end_date >= NOW() - INTERVAL '${months} months'
            GROUP BY al.winner_login, al.coin_description, al.year, al.condition
            HAVING COUNT(*) >= $1
            ORDER BY COUNT(*) DESC, AVG(al.winning_bid) DESC
        `;
        
        const result = await pool.query(circularBuyersQuery, [minPurchases]);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} —Å–ª—É—á–∞–µ–≤ –∫—Ä—É–≥–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫`);
        
        // –®–∞–≥ 2: –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        console.log('üîç –®–∞–≥ 2: –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
        const suspiciousCases = [];
        
        for (const row of result.rows) {
            let suspicionScore = 0;
            let riskLevel = '–ù–û–†–ú–ê';
            
            // –ü—Ä–∏–∑–Ω–∞–∫ 1: –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
            if (row.weeks_span < 12) { // –ú–µ–Ω–µ–µ 3 –º–µ—Å—è—Ü–µ–≤
                suspicionScore += 20;
            }
            
            // –ü—Ä–∏–∑–Ω–∞–∫ 2: –ù–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
            if (row.avg_competition < 5) {
                suspicionScore += 15;
            }
            
            // –ü—Ä–∏–∑–Ω–∞–∫ 3: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ü–µ–Ω—ã (–Ω–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è)
            if (row.price_variance_pct < 10) {
                suspicionScore += 20;
            }
            
            // –ü—Ä–∏–∑–Ω–∞–∫ 4: –ú–Ω–æ–≥–æ –ø–æ–∫—É–ø–æ–∫
            if (row.purchase_count >= 5) {
                suspicionScore += 25;
            } else if (row.purchase_count >= 3) {
                suspicionScore += 15;
            }
            
            // –ü—Ä–∏–∑–Ω–∞–∫ 5: –í—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
            if (row.avg_competition < 3 && row.avg_price > 1000) {
                suspicionScore += 30;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            if (suspicionScore >= 80) {
                riskLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (suspicionScore >= 50) {
                riskLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (suspicionScore >= 30) {
                riskLevel = '–í–ù–ò–ú–ê–ù–ò–ï';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            if (riskLevel !== '–ù–û–†–ú–ê') {
                suspiciousCases.push({
                    winner_login: row.winner_login,
                    coin_description: row.coin_description,
                    year: row.year,
                    condition: row.condition,
                    purchase_count: parseInt(row.purchase_count),
                    avg_price: parseFloat(row.avg_price),
                    min_price: parseFloat(row.min_price),
                    max_price: parseFloat(row.max_price),
                    price_variance_pct: parseFloat(row.price_variance_pct) || 0,
                    avg_competition: parseFloat(row.avg_competition) || 0,
                    weeks_span: parseFloat(row.weeks_span),
                    auctions: row.auctions,
                    first_purchase: row.first_purchase,
                    last_purchase: row.last_purchase,
                    suspicion_score: suspicionScore,
                    risk_level: riskLevel
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        suspiciousCases.sort((a, b) => b.suspicion_score - a.suspicion_score);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${suspiciousCases.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∫—Ä—É–≥–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫`);
        
        res.json({
            success: true,
            data: suspiciousCases,
            count: suspiciousCases.length,
            parameters: {
                min_purchases: minPurchases,
                months: months
            },
            message: `–ù–∞–π–¥–µ–Ω–æ ${suspiciousCases.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∫—Ä—É–≥–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä—É–≥–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä—É–≥–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫',
            details: error.message 
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–ì–∏–ø–æ—Ç–µ–∑–∞ 2)
app.get('/api/analytics/linked-accounts', async (req, res) => {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...');
        
        const similarityThreshold = parseFloat(req.query.similarity_threshold) || 0.70;
        const minBids = parseInt(req.query.min_bids) || 10;
        const months = parseInt(req.query.months) || 3;
        
        // –®–∞–≥ 0: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–≤—Ç–æ–±–∏–¥–∞–º
        console.log(`üîç –®–∞–≥ 0: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–≤—Ç–æ–±–∏–¥–∞–º...`);
        const autobidCheckQuery = `
            SELECT 
                COUNT(*) as total_bids,
                COUNT(CASE WHEN is_auto_bid = true THEN 1 END) as autobid_count,
                COUNT(CASE WHEN is_auto_bid = false THEN 1 END) as manual_bid_count,
                COUNT(CASE WHEN is_auto_bid IS NULL THEN 1 END) as null_bid_count,
                AVG(CASE WHEN is_auto_bid = true THEN 1 ELSE 0 END) as autobid_ratio
            FROM lot_bids
            WHERE bid_timestamp >= NOW() - INTERVAL '${months} months'
        `;
        const autobidCheck = await pool.query(autobidCheckQuery);
        console.log(`üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–±–∏–¥–æ–≤ –∑–∞ ${months} –º–µ—Å—è—Ü–µ–≤:`);
        console.log(`   –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: ${autobidCheck.rows[0].total_bids}`);
        console.log(`   –ê–≤—Ç–æ–±–∏–¥–æ–≤: ${autobidCheck.rows[0].autobid_count}`);
        console.log(`   –†—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: ${autobidCheck.rows[0].manual_bid_count}`);
        console.log(`   NULL –∑–Ω–∞—á–µ–Ω–∏–π: ${autobidCheck.rows[0].null_bid_count}`);
        console.log(`   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∞–≤—Ç–æ–±–∏–¥–æ–≤: ${(autobidCheck.rows[0].autobid_ratio * 100).toFixed(1)}%`);
        
        // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log(`üîç –®–∞–≥ 1: –°—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ ${months} –º–µ—Å—è—Ü–µ–≤...`);
        const userProfilesQuery = `
            WITH suspicious_users AS (
                SELECT winner_login
                FROM winner_ratings
                WHERE suspicious_score > 30
                ORDER BY suspicious_score DESC
                LIMIT 200
            ),
            user_stats AS (
                SELECT 
                    lb.bidder_login,
                    EXTRACT(HOUR FROM lb.bid_timestamp) as hour,
                    COUNT(*) as bids_at_hour,
                    AVG(CASE WHEN lb.is_auto_bid = true THEN 1 ELSE 0 END) as auto_bid_ratio,
                    COUNT(DISTINCT lb.lot_id) as unique_lots,
                    COUNT(*) as total_bids
                FROM lot_bids lb
                JOIN suspicious_users su ON su.winner_login = lb.bidder_login
                WHERE lb.bid_timestamp >= NOW() - INTERVAL '${months} months'
                  AND lb.bid_timestamp IS NOT NULL
                GROUP BY lb.bidder_login, EXTRACT(HOUR FROM lb.bid_timestamp)
            ),
            user_aggregated AS (
                SELECT 
                    bidder_login,
                    SUM(bids_at_hour) as total_bids,
                    AVG(auto_bid_ratio) as avg_auto_bid_ratio,
                    SUM(unique_lots) as total_unique_lots,
                    ARRAY_AGG(
                        JSON_BUILD_OBJECT(
                            'hour', hour,
                            'bids', bids_at_hour
                        ) ORDER BY hour
                    ) as hourly_pattern
                FROM user_stats
                GROUP BY bidder_login
                HAVING SUM(bids_at_hour) >= $1
            )
            SELECT 
                bidder_login,
                total_bids,
                avg_auto_bid_ratio,
                total_unique_lots,
                hourly_pattern
            FROM user_aggregated
            ORDER BY total_bids DESC
        `;
        
        const profilesResult = await pool.query(userProfilesQuery, [minBids]);
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è ${profilesResult.rows.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        console.log(`üî¢ –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ${profilesResult.rows.length * (profilesResult.rows.length - 1) / 2} —Å—Ä–∞–≤–Ω–µ–Ω–∏–π`);
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–≤—Ç–æ–±–∏–¥–∞—Ö
        if (profilesResult.rows.length > 0) {
            const autobidRatios = profilesResult.rows
                .map(user => user.avg_auto_bid_ratio)
                .filter(ratio => ratio !== null && !isNaN(ratio));
            
            if (autobidRatios.length > 0) {
                const avgAutobidRatio = autobidRatios.reduce((a, b) => a + b, 0) / autobidRatios.length;
                const maxAutobidRatio = Math.max(...autobidRatios);
                const minAutobidRatio = Math.min(...autobidRatios);
                
                console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–±–∏–¥–æ–≤:`);
                console.log(`   –°—Ä–µ–¥–Ω–∏–π % –∞–≤—Ç–æ–±–∏–¥–æ–≤: ${(avgAutobidRatio * 100).toFixed(1)}%`);
                console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π %: ${(maxAutobidRatio * 100).toFixed(1)}%`);
                console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π %: ${(minAutobidRatio * 100).toFixed(1)}%`);
                console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: ${autobidRatios.length}/${profilesResult.rows.length}`);
            } else {
                console.log(`‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–≤—Ç–æ–±–∏–¥–∞–º`);
            }
        }
        
        if (profilesResult.rows.length < 2) {
            return res.json({
                success: false,
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö',
                message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
                data: [],
                count: 0
            });
        }
        
        // –®–∞–≥ 2: –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üîç –®–∞–≥ 2: –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const linkedAccounts = [];
        
        for (let i = 0; i < profilesResult.rows.length; i++) {
            for (let j = i + 1; j < profilesResult.rows.length; j++) {
                const user1 = profilesResult.rows[i];
                const user2 = profilesResult.rows[j];
                
                // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ö–æ–∂–µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                const hourlySim = calculateHourlySimilarity(user1.hourly_pattern, user2.hourly_pattern);
                
                // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ö–æ–∂–µ—Å—Ç—å –∞–≤—Ç–æ–±–∏–¥–æ–≤ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è)
                const user1Autobid = user1.avg_auto_bid_ratio || 0;
                const user2Autobid = user2.avg_auto_bid_ratio || 0;
                const autoBidDiff = Math.abs(user1Autobid - user2Autobid);
                const autoBidSim = 1 - autoBidDiff;
                
                // –û–±—â–∞—è –ø–æ—Ö–æ–∂–µ—Å—Ç—å (70% –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, 30% –∞–≤—Ç–æ–±–∏–¥—ã)
                const similarity = (hourlySim * 0.7) + (autoBidSim * 0.3);
                
                if (similarity >= similarityThreshold) {
                    linkedAccounts.push({
                        user1: user1.bidder_login,
                        user2: user2.bidder_login,
                        similarity: Math.round(similarity * 100) / 100,
                        hourly_similarity: Math.round(hourlySim * 100) / 100,
                        autobid_similarity: Math.round(autoBidSim * 100) / 100,
                        user1_bids: user1.total_bids,
                        user2_bids: user2.total_bids,
                        user1_autobid_ratio: Math.round(user1.avg_auto_bid_ratio * 100) / 100,
                        user2_autobid_ratio: Math.round(user2.avg_auto_bid_ratio * 100) / 100,
                        risk_level: similarity >= 0.90 ? '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û' : 
                                   similarity >= 0.85 ? '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û' : '–í–ù–ò–ú–ê–ù–ò–ï'
                    });
                }
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
        linkedAccounts.sort((a, b) => b.similarity - a.similarity);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${linkedAccounts.length} –ø–∞—Ä —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
        console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –≤—ã–¥–∞—á–µ: ${linkedAccounts.length}`);
        
        res.json({
            success: true,
            data: linkedAccounts,
            count: linkedAccounts.length,
            parameters: {
                similarity_threshold: similarityThreshold,
                min_bids: minBids,
                months: months
            },
            message: `–ù–∞–π–¥–µ–Ω–æ ${linkedAccounts.length} –ø–∞—Ä —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
            details: error.message 
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ü–∏—Ä—Å–æ–Ω–∞ + –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
function calculateHourlySimilarity(pattern1, pattern2) {
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã –ø–æ 24 —á–∞—Å–∞
    const hours1 = new Array(24).fill(0);
    const hours2 = new Array(24).fill(0);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    pattern1.forEach(item => {
        if (item.hour >= 0 && item.hour < 24) {
            hours1[item.hour] = item.bids;
        }
    });
    
    pattern2.forEach(item => {
        if (item.hour >= 0 && item.hour < 24) {
            hours2[item.hour] = item.bids;
        }
    });
    
    // 1. –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –ü–∏—Ä—Å–æ–Ω–∞
    const n = 24;
    const sum1 = hours1.reduce((a, b) => a + b, 0);
    const sum2 = hours2.reduce((a, b) => a + b, 0);
    const mean1 = sum1 / n;
    const mean2 = sum2 / n;
    
    let numerator = 0;
    let denom1 = 0;
    let denom2 = 0;
    
    for (let i = 0; i < n; i++) {
        const diff1 = hours1[i] - mean1;
        const diff2 = hours2[i] - mean2;
        numerator += diff1 * diff2;
        denom1 += diff1 * diff1;
        denom2 += diff2 * diff2;
    }
    
    let pearsonCorrelation = 0;
    if (denom1 !== 0 && denom2 !== 0) {
        pearsonCorrelation = numerator / Math.sqrt(denom1 * denom2);
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –≤ –ø–æ—Ö–æ–∂–µ—Å—Ç—å (0-1)
    const pearsonSimilarity = Math.max(0, pearsonCorrelation);
    
    // 2. –í—ã—á–∏—Å–ª—è–µ–º –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    let euclideanDistance = 0;
    for (let i = 0; i < n; i++) {
        euclideanDistance += Math.pow(hours1[i] - hours2[i], 2);
    }
    euclideanDistance = Math.sqrt(euclideanDistance);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–æ—Ö–æ–∂–µ—Å—Ç—å (0-1)
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    const maxPossibleDistance = Math.sqrt(n * Math.pow(Math.max(...hours1, ...hours2), 2));
    const euclideanSimilarity = maxPossibleDistance > 0 ? 
        Math.max(0, 1 - (euclideanDistance / maxPossibleDistance)) : 0;
    
    // 3. –£—Å—Ä–µ–¥–Ω—è–µ–º –¥–≤–∞ –º–µ—Ç–æ–¥–∞ (50% –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è + 50% –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
    const combinedSimilarity = (pearsonSimilarity * 0.5) + (euclideanSimilarity * 0.5);
    
    return combinedSimilarity;
}

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂ (–ì–∏–ø–æ—Ç–µ–∑–∞ 8)
app.get('/api/analytics/carousel-analysis', async (req, res) => {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂...');
        
        const minSales = parseInt(req.query.min_sales) || 3;
        const maxWeeks = parseInt(req.query.max_weeks) || 4;
        const months = parseInt(req.query.months) || 6;
        
        // –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –º–æ–Ω–µ—Ç—ã, –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        console.log(`üîç –®–∞–≥ 1: –ò—â–µ–º –º–æ–Ω–µ—Ç—ã —Å ${minSales}+ –ø—Ä–æ–¥–∞–∂–∞–º–∏ –∑–∞ ${months} –º–µ—Å—è—Ü–µ–≤...`);
        const coinSalesQuery = `
            SELECT 
                al.coin_description,
                al.year,
                al.condition,
                COUNT(*) as sales_count,
                ARRAY_AGG(al.winner_login ORDER BY al.auction_end_date) as winners,
                ARRAY_AGG(al.auction_number ORDER BY al.auction_end_date) as auctions,
                ARRAY_AGG(al.winning_bid ORDER BY al.auction_end_date) as prices,
                ARRAY_AGG(al.auction_end_date ORDER BY al.auction_end_date) as dates,
                MIN(al.auction_end_date) as first_sale,
                MAX(al.auction_end_date) as last_sale
            FROM auction_lots al
            WHERE al.winner_login IS NOT NULL
              AND al.winning_bid IS NOT NULL
              AND al.winning_bid > 0
              AND al.auction_end_date >= NOW() - INTERVAL '${months} months'
            GROUP BY al.coin_description, al.year, al.condition
            HAVING COUNT(*) >= $1
            ORDER BY COUNT(*) DESC
        `;
        
        const coinSalesResult = await pool.query(coinSalesQuery, [minSales]);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${coinSalesResult.rows.length} –º–æ–Ω–µ—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏`);
        
        // –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–∞—Ä—É—Å–µ–ª–∏
        console.log('üîç –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂...');
        const carousels = [];
        
        for (const coin of coinSalesResult.rows) {
            const winners = coin.winners;
            const prices = coin.prices;
            const dates = coin.dates;
            const auctions = coin.auctions;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏
            const uniqueWinners = [...new Set(winners)];
            const timeSpanWeeks = (new Date(coin.last_sale) - new Date(coin.first_sale)) / (1000 * 60 * 60 * 24 * 7);
            
            // –ü—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞—Ä—É—Å–µ–ª–∏
            let carouselScore = 0;
            let riskLevel = '–ù–û–†–ú–ê';
            
            // 1. –ú–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–∂
            const winnerRatio = uniqueWinners.length / winners.length;
            if (winnerRatio < 0.5) {
                carouselScore += 30;
            } else if (winnerRatio < 0.7) {
                carouselScore += 20;
            }
            
            // 2. –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–∂–∞–º–∏
            if (timeSpanWeeks < maxWeeks) {
                carouselScore += 25;
            }
            
            // 3. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã
            let priceGrowth = 0;
            if (prices.length > 1) {
                const firstPrice = prices[0];
                const lastPrice = prices[prices.length - 1];
                priceGrowth = ((lastPrice - firstPrice) / firstPrice) * 100;
                
                if (priceGrowth > 50) {
                    carouselScore += 20;
                } else if (priceGrowth > 20) {
                    carouselScore += 10;
                }
            }
            
            // 4. –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏
            const winnerCounts = {};
            winners.forEach(winner => {
                winnerCounts[winner] = (winnerCounts[winner] || 0) + 1;
            });
            
            const maxWins = Math.max(...Object.values(winnerCounts));
            if (maxWins >= 3) {
                carouselScore += 25;
            } else if (maxWins >= 2) {
                carouselScore += 15;
            }
            
            // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É—é—Ç –ª–∏ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –ª—é–¥–∏ –≤ —Ç–æ—Ä–≥–∞—Ö
            // (—ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ lot_bids)
            const biddersQuery = `
                SELECT DISTINCT lb.bidder_login
                FROM lot_bids lb
                JOIN auction_lots al ON lb.lot_id = al.id
                WHERE al.coin_description = $1
                  AND al.year = $2
                  AND al.condition = $3
                  AND al.auction_number = ANY($4)
            `;
            
            const biddersResult = await pool.query(biddersQuery, [
                coin.coin_description,
                coin.year,
                coin.condition,
                auctions
            ]);
            
            const allBidders = biddersResult.rows.map(row => row.bidder_login);
            const uniqueBidders = [...new Set(allBidders)];
            
            // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤ –º–∞–ª–æ –∏ –æ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
            const biddersOverlap = uniqueBidders.filter(bidder => uniqueWinners.includes(bidder)).length;
            const overlapRatio = biddersOverlap / uniqueWinners.length;
            
            if (overlapRatio > 0.8) {
                carouselScore += 20;
            } else if (overlapRatio > 0.6) {
                carouselScore += 10;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            if (carouselScore >= 80) {
                riskLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (carouselScore >= 50) {
                riskLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (carouselScore >= 30) {
                riskLevel = '–í–ù–ò–ú–ê–ù–ò–ï';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ä—É—Å–µ–ª–∏
            if (riskLevel !== '–ù–û–†–ú–ê') {
                carousels.push({
                    coin_description: coin.coin_description,
                    year: coin.year,
                    condition: coin.condition,
                    sales_count: coin.sales_count,
                    unique_winners: uniqueWinners.length,
                    winner_ratio: Math.round(winnerRatio * 100) / 100,
                    time_span_weeks: Math.round(timeSpanWeeks * 10) / 10,
                    price_growth_pct: Math.round(priceGrowth * 10) / 10,
                    max_wins_per_user: maxWins,
                    bidders_overlap_ratio: Math.round(overlapRatio * 100) / 100,
                    winners: uniqueWinners,
                    auctions: auctions,
                    prices: prices,
                    dates: dates,
                    carousel_score: carouselScore,
                    risk_level: riskLevel
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É –∫–∞—Ä—É—Å–µ–ª–∏
        carousels.sort((a, b) => b.carousel_score - a.carousel_score);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carousels.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂`);
        
        res.json({
            success: true,
            data: carousels,
            count: carousels.length,
            parameters: {
                min_sales: minSales,
                max_weeks: maxWeeks,
                months: months
            },
            message: `–ù–∞–π–¥–µ–Ω–æ ${carousels.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—É—Å–µ–ª–µ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂',
            details: error.message 
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥–ª–æ—Ö–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤ (–ì–∏–ø–æ—Ç–µ–∑–∞ 3)
app.get('/api/analytics/abandonment-analysis', async (req, res) => {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–≥–ª–æ—Ö–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤...');
        
        const minBids = parseInt(req.query.min_bids) || 5;
        const maxSeconds = parseInt(req.query.max_seconds) || 30;
        const months = parseInt(req.query.months) || 3;
        
        // –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –ª–æ—Ç—ã —Å —Ä–µ–∑–∫–∏–º –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ–º —Ç–æ—Ä–≥–æ–≤
        console.log(`üîç –®–∞–≥ 1: –ò—â–µ–º –ª–æ—Ç—ã —Å –∑–∞–≥–ª–æ—Ö–∞–Ω–∏–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ ${months} –º–µ—Å—è—Ü–µ–≤...`);
        const abandonmentQuery = `
            WITH lot_bid_sequences AS (
                SELECT 
                    lb.lot_id,
                    lb.auction_number,
                    lb.lot_number,
                    lb.bidder_login,
                    lb.bid_amount,
                    lb.bid_timestamp,
                    lb.is_auto_bid,
                    ROW_NUMBER() OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp) as bid_sequence,
                    LAG(lb.bid_timestamp) OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp) as prev_bid_time,
                    EXTRACT(EPOCH FROM (lb.bid_timestamp - LAG(lb.bid_timestamp) OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp))) as seconds_since_prev
                FROM lot_bids lb
                JOIN auction_lots al ON lb.lot_id = al.id
                WHERE lb.bid_timestamp >= NOW() - INTERVAL '${months} months'
                  AND lb.bid_timestamp IS NOT NULL
                  AND al.winning_bid IS NOT NULL
            ),
            lot_stats AS (
                SELECT 
                    lot_id,
                    auction_number,
                    lot_number,
                    COUNT(*) as total_bids,
                    COUNT(DISTINCT bidder_login) as unique_bidders,
                    MAX(bid_sequence) as max_sequence,
                    MAX(seconds_since_prev) as max_gap_seconds,
                    AVG(seconds_since_prev) as avg_gap_seconds,
                    ARRAY_AGG(
                        JSON_BUILD_OBJECT(
                            'bidder', bidder_login,
                            'amount', bid_amount,
                            'timestamp', bid_timestamp,
                            'is_auto', is_auto_bid,
                            'sequence', bid_sequence,
                            'gap_seconds', seconds_since_prev
                        ) ORDER BY bid_timestamp
                    ) as bid_sequence_data
                FROM lot_bid_sequences
                GROUP BY lot_id, auction_number, lot_number
                HAVING COUNT(*) >= $1
            )
            SELECT 
                ls.*,
                al.winner_login,
                al.winning_bid,
                al.starting_bid,
                al.bids_count,
                al.category
            FROM lot_stats ls
            JOIN auction_lots al ON ls.lot_id = al.id
            WHERE ls.max_gap_seconds > $2
            ORDER BY ls.max_gap_seconds DESC
        `;
        
        const result = await pool.query(abandonmentQuery, [minBids, maxSeconds]);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ª–æ—Ç–æ–≤ —Å –∑–∞–≥–ª–æ—Ö–∞–Ω–∏–µ–º —Ç–æ—Ä–≥–æ–≤`);
        
        // –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–≥–ª–æ—Ö–∞–Ω–∏—è
        console.log('üîç –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–≥–ª–æ—Ö–∞–Ω–∏—è...');
        const abandonmentCases = [];
        
        for (const row of result.rows) {
            const bidData = row.bid_sequence_data;
            let abandonmentScore = 0;
            let riskLevel = '–ù–û–†–ú–ê';
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–æ–∫
            let suspiciousPatterns = [];
            
            // 1. –†–µ–∑–∫–æ–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤
            if (row.max_gap_seconds > 300) { // –ë–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç
                abandonmentScore += 25;
                suspiciousPatterns.push('–î–õ–ò–¢–ï–õ–¨–ù–ê–Ø_–ü–ê–£–ó–ê');
            }
            
            // 2. –ó–∞–≥–ª–æ—Ö–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ä—É—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
            const manualBids = bidData.filter(bid => !bid.is_auto).length;
            const autoBids = bidData.filter(bid => bid.is_auto).length;
            
            if (manualBids > 0 && autoBids === 0) {
                abandonmentScore += 20;
                suspiciousPatterns.push('–¢–û–õ–¨–ö–û_–†–£–ß–ù–´–ï_–°–¢–ê–í–ö–ò');
            }
            
            // 3. –ó–∞–≥–ª–æ—Ö–∞–Ω–∏–µ –ø–æ—Å–ª–µ –±—ã—Å—Ç—Ä—ã—Ö —Å—Ç–∞–≤–æ–∫
            const fastBids = bidData.filter(bid => bid.gap_seconds && bid.gap_seconds < 10).length;
            if (fastBids > 2 && row.max_gap_seconds > 60) {
                abandonmentScore += 30;
                suspiciousPatterns.push('–ë–´–°–¢–†–´–ï_–°–¢–ê–í–ö–ò_–ü–ï–†–ï–î_–ó–ê–ì–õ–û–•–ê–ù–ò–ï–ú');
            }
            
            // 4. –ù–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
            if (row.unique_bidders < 3) {
                abandonmentScore += 15;
                suspiciousPatterns.push('–ù–ò–ó–ö–ê–Ø_–ö–û–ù–ö–£–†–ï–ù–¶–ò–Ø');
            }
            
            // 5. –ó–∞–≥–ª–æ—Ö–∞–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã
            const priceMultiplier = row.winning_bid / row.starting_bid;
            if (priceMultiplier > 2.0 && row.max_gap_seconds > 120) {
                abandonmentScore += 20;
                suspiciousPatterns.push('–ó–ê–ì–õ–û–•–ê–ù–ò–ï_–ü–û–°–õ–ï_–í–´–°–û–ö–û–ô_–¶–ï–ù–´');
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            if (abandonmentScore >= 70) {
                riskLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (abandonmentScore >= 40) {
                riskLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (abandonmentScore >= 20) {
                riskLevel = '–í–ù–ò–ú–ê–ù–ò–ï';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            if (riskLevel !== '–ù–û–†–ú–ê') {
                abandonmentCases.push({
                    lot_id: row.lot_id,
                    auction_number: row.auction_number,
                    lot_number: row.lot_number,
                    winner_login: row.winner_login,
                    winning_bid: row.winning_bid,
                    starting_bid: row.starting_bid,
                    total_bids: row.total_bids,
                    unique_bidders: row.unique_bidders,
                    max_gap_seconds: Math.round(row.max_gap_seconds),
                    avg_gap_seconds: Math.round(row.avg_gap_seconds * 10) / 10,
                    price_multiplier: Math.round(priceMultiplier * 100) / 100,
                    manual_bids: manualBids,
                    auto_bids: autoBids,
                    suspicious_patterns: suspiciousPatterns,
                    abandonment_score: abandonmentScore,
                    risk_level: riskLevel,
                    category: row.category
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É –∑–∞–≥–ª–æ—Ö–∞–Ω–∏—è
        abandonmentCases.sort((a, b) => b.abandonment_score - a.abandonment_score);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${abandonmentCases.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∑–∞–≥–ª–æ—Ö–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤`);
        
        res.json({
            success: true,
            data: abandonmentCases,
            count: abandonmentCases.length,
            parameters: {
                min_bids: minBids,
                max_seconds: maxSeconds,
                months: months
            },
            message: `–ù–∞–π–¥–µ–Ω–æ ${abandonmentCases.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∑–∞–≥–ª–æ—Ö–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥–ª–æ—Ö–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥–ª–æ—Ö–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤',
            details: error.message 
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏—è –∞–≤—Ç–æ–±–∏–¥–æ–≤ (–ì–∏–ø–æ—Ç–µ–∑–∞ 4)
app.get('/api/analytics/autobid-probing', async (req, res) => {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏—è –∞–≤—Ç–æ–±–∏–¥–æ–≤...');
        
        const minBids = parseInt(req.query.min_bids) || 3;
        const maxSeconds = parseInt(req.query.max_seconds) || 60;
        const months = parseInt(req.query.months) || 3;
        
        // –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –ª–æ—Ç—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ —Å—Ç–∞–≤–æ–∫
        console.log(`üîç –®–∞–≥ 1: –ò—â–µ–º –ª–æ—Ç—ã —Å –ø—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏–µ–º –∞–≤—Ç–æ–±–∏–¥–æ–≤ –∑–∞ ${months} –º–µ—Å—è—Ü–µ–≤...`);
        const probingQuery = `
            WITH lot_bid_analysis AS (
                SELECT 
                    lb.lot_id,
                    lb.auction_number,
                    lb.lot_number,
                    lb.bidder_login,
                    lb.bid_amount,
                    lb.bid_timestamp,
                    lb.is_auto_bid,
                    ROW_NUMBER() OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp) as bid_sequence,
                    LAG(lb.bid_amount) OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp) as prev_bid_amount,
                    LAG(lb.bidder_login) OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp) as prev_bidder,
                    EXTRACT(EPOCH FROM (lb.bid_timestamp - LAG(lb.bid_timestamp) OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp))) as seconds_since_prev,
                    lb.bid_amount - LAG(lb.bid_amount) OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp) as bid_increment
                FROM lot_bids lb
                JOIN auction_lots al ON lb.lot_id = al.id
                WHERE lb.bid_timestamp >= NOW() - INTERVAL '${months} months'
                  AND lb.bid_timestamp IS NOT NULL
                  AND al.winning_bid IS NOT NULL
            ),
            lot_stats AS (
                SELECT 
                    lot_id,
                    auction_number,
                    lot_number,
                    COUNT(*) as total_bids,
                    COUNT(DISTINCT bidder_login) as unique_bidders,
                    COUNT(CASE WHEN is_auto_bid = true THEN 1 END) as autobid_count,
                    COUNT(CASE WHEN is_auto_bid = false THEN 1 END) as manual_bid_count,
                    AVG(seconds_since_prev) as avg_interval_seconds,
                    MIN(seconds_since_prev) as min_interval_seconds,
                    MAX(seconds_since_prev) as max_interval_seconds,
                    AVG(bid_increment) as avg_increment,
                    STDDEV(bid_increment) as increment_stddev,
                    ARRAY_AGG(
                        JSON_BUILD_OBJECT(
                            'bidder', bidder_login,
                            'amount', bid_amount,
                            'timestamp', bid_timestamp,
                            'is_auto', is_auto_bid,
                            'sequence', bid_sequence,
                            'increment', bid_increment,
                            'interval_seconds', seconds_since_prev
                        ) ORDER BY bid_timestamp
                    ) as bid_sequence_data
                FROM lot_bid_analysis
                GROUP BY lot_id, auction_number, lot_number
                HAVING COUNT(*) >= $1
            )
            SELECT 
                ls.*,
                al.winner_login,
                al.winning_bid,
                al.starting_bid,
                al.bids_count,
                al.category
            FROM lot_stats ls
            JOIN auction_lots al ON ls.lot_id = al.id
            WHERE ls.manual_bid_count > 0 
              AND ls.autobid_count > 0
              AND ls.avg_interval_seconds < $2
            ORDER BY ls.avg_interval_seconds ASC
        `;
        
        const result = await pool.query(probingQuery, [minBids, maxSeconds]);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ª–æ—Ç–æ–≤ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏–µ–º –∞–≤—Ç–æ–±–∏–¥–æ–≤`);
        
        // –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏—è
        console.log('üîç –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏—è –∞–≤—Ç–æ–±–∏–¥–æ–≤...');
        const probingCases = [];
        
        for (const row of result.rows) {
            const bidData = row.bid_sequence_data;
            let probingScore = 0;
            let riskLevel = '–ù–û–†–ú–ê';
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–æ–∫
            let suspiciousPatterns = [];
            
            // 1. –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–±–∏–¥–æ–≤
            let quickBidsAfterAutobid = 0;
            for (let i = 1; i < bidData.length; i++) {
                const current = bidData[i];
                const previous = bidData[i-1];
                
                if (previous.is_auto && !current.is_auto && current.interval_seconds < 30) {
                    quickBidsAfterAutobid++;
                }
            }
            
            if (quickBidsAfterAutobid > 0) {
                probingScore += 25;
                suspiciousPatterns.push('–ë–´–°–¢–†–´–ï_–°–¢–ê–í–ö–ò_–ü–û–°–õ–ï_–ê–í–¢–û–ë–ò–î–û–í');
            }
            
            // 2. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫
            const increments = bidData.filter(bid => bid.increment && bid.increment > 0).map(bid => bid.increment);
            if (increments.length > 2) {
                const isIncreasing = increments.every((inc, i) => i === 0 || inc >= increments[i-1] * 0.8);
                if (isIncreasing) {
                    probingScore += 20;
                    suspiciousPatterns.push('–ü–û–°–¢–ï–ü–ï–ù–ù–û–ï_–£–í–ï–õ–ò–ß–ï–ù–ò–ï_–°–¢–ê–í–û–ö');
                }
            }
            
            // 3. –ù–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–≤ (—Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å)
            if (row.increment_stddev && row.increment_stddev < row.avg_increment * 0.3) {
                probingScore += 15;
                suspiciousPatterns.push('–°–ò–°–¢–ï–ú–ê–¢–ò–ß–ù–´–ï_–ò–ù–ö–†–ï–ú–ï–ù–¢–´');
            }
            
            // 4. –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –∞–≤—Ç–æ–±–∏–¥–∞–º–∏
            const autobidRatio = row.autobid_count / row.total_bids;
            if (autobidRatio > 0.5 && row.avg_interval_seconds < 20) {
                probingScore += 30;
                suspiciousPatterns.push('–í–´–°–û–ö–ê–Ø_–ê–ö–¢–ò–í–ù–û–°–¢–¨_–°_–ê–í–¢–û–ë–ò–î–ê–ú–ò');
            }
            
            // 5. –†–µ–∑–∫–æ–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
            const lastBids = bidData.slice(-3);
            const hasAutobidInLastBids = lastBids.some(bid => bid.is_auto);
            if (hasAutobidInLastBids && row.max_interval_seconds > 300) {
                probingScore += 20;
                suspiciousPatterns.push('–†–ï–ó–ö–û–ï_–ü–†–ï–ö–†–ê–©–ï–ù–ò–ï_–ü–û–°–õ–ï_–ê–í–¢–û–ë–ò–î–ê');
            }
            
            // 6. –¶–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é
            const priceMultiplier = row.winning_bid / row.starting_bid;
            if (priceMultiplier > 3.0 && probingScore > 0) {
                probingScore += 25;
                suspiciousPatterns.push('–ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ï_–ü–†–ï–í–´–®–ï–ù–ò–ï_–¶–ï–ù–´');
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            if (probingScore >= 80) {
                riskLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (probingScore >= 50) {
                riskLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (probingScore >= 30) {
                riskLevel = '–í–ù–ò–ú–ê–ù–ò–ï';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            if (riskLevel !== '–ù–û–†–ú–ê') {
                probingCases.push({
                    lot_id: row.lot_id,
                    auction_number: row.auction_number,
                    lot_number: row.lot_number,
                    winner_login: row.winner_login,
                    winning_bid: row.winning_bid,
                    starting_bid: row.starting_bid,
                    total_bids: row.total_bids,
                    unique_bidders: row.unique_bidders,
                    autobid_count: row.autobid_count,
                    manual_bid_count: row.manual_bid_count,
                    autobid_ratio: Math.round(autobidRatio * 100) / 100,
                    avg_interval_seconds: Math.round(row.avg_interval_seconds * 10) / 10,
                    price_multiplier: Math.round(priceMultiplier * 100) / 100,
                    quick_bids_after_autobid: quickBidsAfterAutobid,
                    suspicious_patterns: suspiciousPatterns,
                    probing_score: probingScore,
                    risk_level: riskLevel,
                    category: row.category
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É –ø—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏—è
        probingCases.sort((a, b) => b.probing_score - a.probing_score);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${probingCases.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏—è –∞–≤—Ç–æ–±–∏–¥–æ–≤`);
        
        res.json({
            success: true,
            data: probingCases,
            count: probingCases.length,
            parameters: {
                min_bids: minBids,
                max_seconds: maxSeconds,
                months: months
            },
            message: `–ù–∞–π–¥–µ–Ω–æ ${probingCases.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏—è –∞–≤—Ç–æ–±–∏–¥–æ–≤`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏—è –∞–≤—Ç–æ–±–∏–¥–æ–≤:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—â—É–ø—ã–≤–∞–Ω–∏—è –∞–≤—Ç–æ–±–∏–¥–æ–≤',
            details: error.message 
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–≥–æ–Ω–∞ —Ü–µ–Ω (–ì–∏–ø–æ—Ç–µ–∑–∞ 5)
app.get('/api/analytics/pricing-strategies', async (req, res) => {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–≥–æ–Ω–∞ —Ü–µ–Ω...');
        
        const minBids = parseInt(req.query.min_bids) || 5;
        const minPriceMultiplier = parseFloat(req.query.min_price_multiplier) || 2.0;
        const months = parseInt(req.query.months) || 6;
        
        // –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –ª–æ—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑–≥–æ–Ω–æ–º —Ü–µ–Ω
        console.log(`üîç –®–∞–≥ 1: –ò—â–µ–º –ª–æ—Ç—ã —Å —Ä–∞–∑–≥–æ–Ω–æ–º —Ü–µ–Ω –∑–∞ ${months} –º–µ—Å—è—Ü–µ–≤...`);
        const pricingQuery = `
            WITH lot_bid_analysis AS (
                SELECT 
                    lb.lot_id,
                    lb.auction_number,
                    lb.lot_number,
                    lb.bidder_login,
                    lb.bid_amount,
                    lb.bid_timestamp,
                    lb.is_auto_bid,
                    ROW_NUMBER() OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp) as bid_sequence,
                    LAG(lb.bid_amount) OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp) as prev_bid_amount,
                    LAG(lb.bidder_login) OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp) as prev_bidder,
                    EXTRACT(EPOCH FROM (lb.bid_timestamp - LAG(lb.bid_timestamp) OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp))) as seconds_since_prev,
                    lb.bid_amount - LAG(lb.bid_amount) OVER (PARTITION BY lb.lot_id ORDER BY lb.bid_timestamp) as bid_increment,
                    (lb.bid_amount - al.starting_bid) / NULLIF(al.starting_bid, 0) as price_multiplier_at_bid
                FROM lot_bids lb
                JOIN auction_lots al ON lb.lot_id = al.id
                WHERE lb.bid_timestamp >= NOW() - INTERVAL '${months} months'
                  AND lb.bid_timestamp IS NOT NULL
                  AND al.winning_bid IS NOT NULL
                  AND al.starting_bid IS NOT NULL
                  AND al.starting_bid > 0
            ),
            lot_stats AS (
                SELECT 
                    lot_id,
                    auction_number,
                    lot_number,
                    COUNT(*) as total_bids,
                    COUNT(DISTINCT bidder_login) as unique_bidders,
                    COUNT(CASE WHEN is_auto_bid = true THEN 1 END) as autobid_count,
                    COUNT(CASE WHEN is_auto_bid = false THEN 1 END) as manual_bid_count,
                    AVG(seconds_since_prev) as avg_interval_seconds,
                    MIN(seconds_since_prev) as min_interval_seconds,
                    MAX(seconds_since_prev) as max_interval_seconds,
                    AVG(bid_increment) as avg_increment,
                    STDDEV(bid_increment) as increment_stddev,
                    MAX(price_multiplier_at_bid) as max_price_multiplier,
                    ARRAY_AGG(
                        JSON_BUILD_OBJECT(
                            'bidder', bidder_login,
                            'amount', bid_amount,
                            'timestamp', bid_timestamp,
                            'is_auto', is_auto_bid,
                            'sequence', bid_sequence,
                            'increment', bid_increment,
                            'interval_seconds', seconds_since_prev,
                            'price_multiplier', price_multiplier_at_bid
                        ) ORDER BY bid_timestamp
                    ) as bid_sequence_data
                FROM lot_bid_analysis
                GROUP BY lot_id, auction_number, lot_number
                HAVING COUNT(*) >= $1
            )
            SELECT 
                ls.*,
                al.winner_login,
                al.winning_bid,
                al.starting_bid,
                al.bids_count,
                al.category,
                (al.winning_bid / al.starting_bid) as final_price_multiplier
            FROM lot_stats ls
            JOIN auction_lots al ON ls.lot_id = al.id
            WHERE (al.winning_bid / al.starting_bid) >= $2
            ORDER BY (al.winning_bid / al.starting_bid) DESC
        `;
        
        const result = await pool.query(pricingQuery, [minBids, minPriceMultiplier]);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ª–æ—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑–≥–æ–Ω–æ–º —Ü–µ–Ω`);
        
        // –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≥–æ–Ω–∞
        console.log('üîç –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≥–æ–Ω–∞ —Ü–µ–Ω...');
        const pricingStrategies = [];
        
        for (const row of result.rows) {
            const bidData = row.bid_sequence_data;
            let strategyScore = 0;
            let riskLevel = '–ù–û–†–ú–ê';
            let strategyType = '–ù–ï–ò–ó–í–ï–°–¢–ù–û';
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–∑–≥–æ–Ω–∞
            let suspiciousPatterns = [];
            
            // 1. –°—Ç—Ä–∞—Ç–µ–≥–∏—è "–ì—Ä—É–ø–ø–∞ –ê": –°—Ä–∞–∑—É —Ä–∞–∑–≥–æ–Ω—è–µ—Ç —Ü–µ–Ω—É
            const earlyBids = bidData.slice(0, Math.min(3, bidData.length));
            const earlyPriceMultiplier = earlyBids.length > 0 ? 
                Math.max(...earlyBids.map(bid => bid.price_multiplier || 0)) : 0;
            
            if (earlyPriceMultiplier > 1.5) {
                strategyScore += 30;
                strategyType = '–ì–†–£–ü–ü–ê_–ê_–ë–´–°–¢–†–´–ô_–†–ê–ó–ì–û–ù';
                suspiciousPatterns.push('–ë–´–°–¢–†–´–ô_–†–ê–ó–ì–û–ù_–í_–ù–ê–ß–ê–õ–ï');
            }
            
            // 2. –°—Ç—Ä–∞—Ç–µ–≥–∏—è "–ì—Ä—É–ø–ø–∞ –ë": –î–∞–µ—Ç "–ø–æ–≤–ª–∞–¥–µ—Ç—å" –Ω–µ–¥–µ–ª—é, –ø–æ—Ç–æ–º —Ä–µ–∑–∫–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç
            const midPoint = Math.floor(bidData.length / 2);
            const earlyPhase = bidData.slice(0, midPoint);
            const latePhase = bidData.slice(midPoint);
            
            const earlyMaxMultiplier = earlyPhase.length > 0 ? 
                Math.max(...earlyPhase.map(bid => bid.price_multiplier || 0)) : 0;
            const lateMaxMultiplier = latePhase.length > 0 ? 
                Math.max(...latePhase.map(bid => bid.price_multiplier || 0)) : 0;
            
            if (lateMaxMultiplier > earlyMaxMultiplier * 1.5) {
                strategyScore += 25;
                strategyType = '–ì–†–£–ü–ü–ê_–ë_–û–¢–õ–û–ñ–ï–ù–ù–´–ô_–†–ê–ó–ì–û–ù';
                suspiciousPatterns.push('–û–¢–õ–û–ñ–ï–ù–ù–´–ô_–†–ê–ó–ì–û–ù_–¶–ï–ù–´');
            }
            
            // 3. –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç—ã (—Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
            if (row.increment_stddev && row.increment_stddev < row.avg_increment * 0.2) {
                strategyScore += 20;
                suspiciousPatterns.push('–°–ò–°–¢–ï–ú–ê–¢–ò–ß–ù–´–ï_–ò–ù–ö–†–ï–ú–ï–ù–¢–´');
            }
            
            // 4. –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –±—ã—Å—Ç—Ä—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏
            const fastBids = bidData.filter(bid => bid.interval_seconds && bid.interval_seconds < 30).length;
            const fastBidRatio = fastBids / bidData.length;
            
            if (fastBidRatio > 0.7) {
                strategyScore += 25;
                suspiciousPatterns.push('–í–´–°–û–ö–ê–Ø_–ê–ö–¢–ò–í–ù–û–°–¢–¨_–ë–´–°–¢–†–´–•_–°–¢–ê–í–û–ö');
            }
            
            // 5. –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–≤–æ–∫ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const bidderCounts = {};
            bidData.forEach(bid => {
                bidderCounts[bid.bidder] = (bidderCounts[bid.bidder] || 0) + 1;
            });
            
            const maxBidsPerUser = Math.max(...Object.values(bidderCounts));
            const concentrationRatio = maxBidsPerUser / bidData.length;
            
            if (concentrationRatio > 0.6) {
                strategyScore += 20;
                suspiciousPatterns.push('–ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–Ø_–°–¢–ê–í–û–ö_–û–î–ù–û–ì–û_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
            }
            
            // 6. –†–µ–∑–∫–∏–µ —Å–∫–∞—á–∫–∏ —Ü–µ–Ω
            const largeIncrements = bidData.filter(bid => 
                bid.increment && bid.increment > row.avg_increment * 2
            ).length;
            
            if (largeIncrements > 2) {
                strategyScore += 15;
                suspiciousPatterns.push('–†–ï–ó–ö–ò–ï_–°–ö–ê–ß–ö–ò_–¶–ï–ù');
            }
            
            // 7. –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
            if (row.final_price_multiplier > 5.0) {
                strategyScore += 30;
                suspiciousPatterns.push('–ö–†–ò–¢–ò–ß–ï–°–ö–ò_–í–´–°–û–ö–ò–ô_–ú–ù–û–ñ–ò–¢–ï–õ–¨');
            } else if (row.final_price_multiplier > 3.0) {
                strategyScore += 20;
                suspiciousPatterns.push('–í–´–°–û–ö–ò–ô_–ú–ù–û–ñ–ò–¢–ï–õ–¨');
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            if (strategyScore >= 80) {
                riskLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (strategyScore >= 50) {
                riskLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (strategyScore >= 30) {
                riskLevel = '–í–ù–ò–ú–ê–ù–ò–ï';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            if (riskLevel !== '–ù–û–†–ú–ê') {
                pricingStrategies.push({
                    lot_id: row.lot_id,
                    auction_number: row.auction_number,
                    lot_number: row.lot_number,
                    winner_login: row.winner_login,
                    winning_bid: row.winning_bid,
                    starting_bid: row.starting_bid,
                    final_price_multiplier: Math.round(row.final_price_multiplier * 100) / 100,
                    total_bids: row.total_bids,
                    unique_bidders: row.unique_bidders,
                    autobid_count: row.autobid_count,
                    manual_bid_count: row.manual_bid_count,
                    avg_interval_seconds: Math.round(row.avg_interval_seconds * 10) / 10,
                    fast_bid_ratio: Math.round(fastBidRatio * 100) / 100,
                    concentration_ratio: Math.round(concentrationRatio * 100) / 100,
                    large_increments_count: largeIncrements,
                    strategy_type: strategyType,
                    suspicious_patterns: suspiciousPatterns,
                    strategy_score: strategyScore,
                    risk_level: riskLevel,
                    category: row.category
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        pricingStrategies.sort((a, b) => b.strategy_score - a.strategy_score);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${pricingStrategies.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–≥–æ–Ω–∞ —Ü–µ–Ω`);
        
        res.json({
            success: true,
            data: pricingStrategies,
            count: pricingStrategies.length,
            parameters: {
                min_bids: minBids,
                min_price_multiplier: minPriceMultiplier,
                months: months
            },
            message: `–ù–∞–π–¥–µ–Ω–æ ${pricingStrategies.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–≥–æ–Ω–∞ —Ü–µ–Ω`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–≥–æ–Ω–∞ —Ü–µ–Ω:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–∑–≥–æ–Ω–∞ —Ü–µ–Ω',
            details: error.message 
        });
    }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–∫—Ç–∏–∫ –ø—Ä–∏–º–∞–Ω–∫–∏ (–ì–∏–ø–æ—Ç–µ–∑–∞ 7)
app.get('/api/analytics/decoy-tactics', async (req, res) => {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–∞–∫—Ç–∏–∫ –ø—Ä–∏–º–∞–Ω–∫–∏...');
        
        const minLots = parseInt(req.query.min_lots) || 3;
        const maxPriceDiff = parseFloat(req.query.max_price_diff) || 0.5; // 50% —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–µ
        const months = parseInt(req.query.months) || 6;
        
        // –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –ø–æ–∫—É–ø–æ–∫
        console.log(`üîç –®–∞–≥ 1: –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫—Ç–∏–∫–∞–º–∏ –ø—Ä–∏–º–∞–Ω–∫–∏ –∑–∞ ${months} –º–µ—Å—è—Ü–µ–≤...`);
        const decoyQuery = `
            WITH user_purchases AS (
                SELECT 
                    al.winner_login,
                    al.coin_description,
                    al.year,
                    al.condition,
                    al.winning_bid,
                    al.starting_bid,
                    al.auction_number,
                    al.auction_end_date,
                    al.category,
                    (al.winning_bid / al.starting_bid) as price_multiplier
                FROM auction_lots al
                WHERE al.winner_login IS NOT NULL
                  AND al.winning_bid IS NOT NULL
                  AND al.winning_bid > 0
                  AND al.starting_bid IS NOT NULL
                  AND al.starting_bid > 0
                  AND al.auction_end_date >= NOW() - INTERVAL '${months} months'
            ),
            user_stats AS (
                SELECT 
                    winner_login,
                    COUNT(*) as total_purchases,
                    COUNT(DISTINCT coin_description) as unique_coins,
                    AVG(winning_bid) as avg_price,
                    MIN(winning_bid) as min_price,
                    MAX(winning_bid) as max_price,
                    AVG(price_multiplier) as avg_price_multiplier,
                    STDDEV(winning_bid) as price_stddev,
                    ARRAY_AGG(
                        JSON_BUILD_OBJECT(
                            'coin_description', coin_description,
                            'year', year,
                            'condition', condition,
                            'winning_bid', winning_bid,
                            'starting_bid', starting_bid,
                            'price_multiplier', price_multiplier,
                            'auction_number', auction_number,
                            'auction_end_date', auction_end_date,
                            'category', category
                        ) ORDER BY auction_end_date
                    ) as purchases
                FROM user_purchases
                GROUP BY winner_login
                HAVING COUNT(*) >= $1
            )
            SELECT *
            FROM user_stats
            ORDER BY total_purchases DESC
        `;
        
        const result = await pool.query(decoyQuery, [minLots]);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏`);
        
        // –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–∫—Ç–∏–∫–∏ –ø—Ä–∏–º–∞–Ω–∫–∏
        console.log('üîç –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–∫—Ç–∏–∫–∏ –ø—Ä–∏–º–∞–Ω–∫–∏...');
        const decoyTactics = [];
        
        for (const row of result.rows) {
            const purchases = row.purchases;
            let decoyScore = 0;
            let riskLevel = '–ù–û–†–ú–ê';
            let tacticType = '–ù–ï–ò–ó–í–ï–°–¢–ù–û';
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∫—É–ø–æ–∫
            let suspiciousPatterns = [];
            
            // 1. –°–º–µ—à–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏: –¥–µ—à–µ–≤—ã–µ + –¥–æ—Ä–æ–≥–∏–µ
            const prices = purchases.map(p => p.winning_bid);
            const sortedPrices = [...prices].sort((a, b) => a - b);
            
            const cheapPurchases = sortedPrices.slice(0, Math.floor(sortedPrices.length / 2));
            const expensivePurchases = sortedPrices.slice(Math.floor(sortedPrices.length / 2));
            
            const avgCheapPrice = cheapPurchases.reduce((a, b) => a + b, 0) / cheapPurchases.length;
            const avgExpensivePrice = expensivePurchases.reduce((a, b) => a + b, 0) / expensivePurchases.length;
            
            if (avgExpensivePrice > avgCheapPrice * 3) {
                decoyScore += 25;
                tacticType = '–°–ú–ï–®–ê–ù–ù–´–ï_–ü–û–ö–£–ü–ö–ò';
                suspiciousPatterns.push('–°–ú–ï–®–ï–ù–ò–ï_–î–ï–®–ï–í–´–•_–ò_–î–û–†–û–ì–ò–•');
            }
            
            // 2. –ü–∞—Ç—Ç–µ—Ä–Ω "–ø—Ä–∏–º–∞–Ω–∫–∞": –¥–µ—à–µ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ—Ä–æ–≥–æ–π
            let decoyPatterns = 0;
            for (let i = 0; i < purchases.length - 1; i++) {
                const current = purchases[i];
                const next = purchases[i + 1];
                
                // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–∫—É–ø–∫–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Ä–æ–∂–µ
                if (next.winning_bid > current.winning_bid * 2) {
                    decoyPatterns++;
                }
            }
            
            if (decoyPatterns > 0) {
                decoyScore += 20;
                suspiciousPatterns.push('–î–ï–®–ï–í–ê–Ø_–ü–ï–†–ï–î_–î–û–†–û–ì–û–ô');
            }
            
            // 3. –ù–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –≤ –¥–µ—à–µ–≤—ã—Ö –ø–æ–∫—É–ø–∫–∞—Ö (—Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å)
            const cheapPriceStddev = Math.sqrt(
                cheapPurchases.reduce((sum, price) => sum + Math.pow(price - avgCheapPrice, 2), 0) / cheapPurchases.length
            );
            
            if (cheapPriceStddev < avgCheapPrice * 0.3) {
                decoyScore += 15;
                suspiciousPatterns.push('–°–ò–°–¢–ï–ú–ê–¢–ò–ß–ù–´–ï_–î–ï–®–ï–í–´–ï_–ü–û–ö–£–ü–ö–ò');
            }
            
            // 4. –í—ã—Å–æ–∫–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Ü–µ–Ω
            const highMultipliers = purchases.filter(p => p.price_multiplier > 2.0).length;
            const highMultiplierRatio = highMultipliers / purchases.length;
            
            if (highMultiplierRatio > 0.5) {
                decoyScore += 20;
                suspiciousPatterns.push('–í–´–°–û–ö–ò–ï_–ú–ù–û–ñ–ò–¢–ï–õ–ò_–¶–ï–ù');
            }
            
            // 5. –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            const categoryCounts = {};
            purchases.forEach(p => {
                categoryCounts[p.category] = (categoryCounts[p.category] || 0) + 1;
            });
            
            const maxCategoryCount = Math.max(...Object.values(categoryCounts));
            const categoryConcentration = maxCategoryCount / purchases.length;
            
            if (categoryConcentration > 0.7) {
                decoyScore += 10;
                suspiciousPatterns.push('–ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–Ø_–ü–û_–ö–ê–¢–ï–ì–û–†–ò–Ø–ú');
            }
            
            // 6. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: –±—ã—Å—Ç—Ä—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
            const timeGaps = [];
            for (let i = 1; i < purchases.length; i++) {
                const currentDate = new Date(purchases[i].auction_end_date);
                const prevDate = new Date(purchases[i-1].auction_end_date);
                const daysDiff = (currentDate - prevDate) / (1000 * 60 * 60 * 24);
                timeGaps.push(daysDiff);
            }
            
            const avgTimeGap = timeGaps.reduce((a, b) => a + b, 0) / timeGaps.length;
            const quickPurchases = timeGaps.filter(gap => gap < 7).length; // –ú–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏
            
            if (quickPurchases > purchases.length * 0.5) {
                decoyScore += 15;
                suspiciousPatterns.push('–ë–´–°–¢–†–´–ï_–ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ï_–ü–û–ö–£–ü–ö–ò');
            }
            
            // 7. –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–æ bids_count)
            const highPriceLowCompetition = purchases.filter(p => 
                p.winning_bid > 5000 && p.price_multiplier > 3.0
            ).length;
            
            if (highPriceLowCompetition > 0) {
                decoyScore += 25;
                suspiciousPatterns.push('–í–´–°–û–ö–ò–ï_–¶–ï–ù–´_–ü–†–ò_–ù–ò–ó–ö–û–ô_–ö–û–ù–ö–£–†–ï–ù–¶–ò–ò');
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            if (decoyScore >= 80) {
                riskLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (decoyScore >= 50) {
                riskLevel = '–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û';
            } else if (decoyScore >= 30) {
                riskLevel = '–í–ù–ò–ú–ê–ù–ò–ï';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            if (riskLevel !== '–ù–û–†–ú–ê') {
                decoyTactics.push({
                    winner_login: row.winner_login,
                    total_purchases: row.total_purchases,
                    unique_coins: row.unique_coins,
                    avg_price: Math.round(row.avg_price * 100) / 100,
                    min_price: row.min_price,
                    max_price: row.max_price,
                    price_range_ratio: Math.round((row.max_price / row.min_price) * 100) / 100,
                    avg_price_multiplier: Math.round(row.avg_price_multiplier * 100) / 100,
                    high_multiplier_ratio: Math.round(highMultiplierRatio * 100) / 100,
                    category_concentration: Math.round(categoryConcentration * 100) / 100,
                    quick_purchases_ratio: Math.round((quickPurchases / purchases.length) * 100) / 100,
                    decoy_patterns_count: decoyPatterns,
                    tactic_type: tacticType,
                    suspicious_patterns: suspiciousPatterns,
                    decoy_score: decoyScore,
                    risk_level: riskLevel
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É —Ç–∞–∫—Ç–∏–∫–∏ –ø—Ä–∏–º–∞–Ω–∫–∏
        decoyTactics.sort((a, b) => b.decoy_score - a.decoy_score);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${decoyTactics.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–∫—Ç–∏–∫ –ø—Ä–∏–º–∞–Ω–∫–∏`);
        
        res.json({
            success: true,
            data: decoyTactics,
            count: decoyTactics.length,
            parameters: {
                min_lots: minLots,
                max_price_diff: maxPriceDiff,
                months: months
            },
            message: `–ù–∞–π–¥–µ–Ω–æ ${decoyTactics.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–∫—Ç–∏–∫ –ø—Ä–∏–º–∞–Ω–∫–∏`
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–∫—Ç–∏–∫ –ø—Ä–∏–º–∞–Ω–∫–∏:', error);
        res.status(500).json({ 
            success: false, 
            error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–∫—Ç–∏–∫ –ø—Ä–∏–º–∞–Ω–∫–∏',
            details: error.message 
        });
    }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
app.get('/analytics', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'analytics.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ Analytics Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/analytics`);
});

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë Analytics Service: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    await pool.end();
    process.exit(0);
});

module.exports = app;
