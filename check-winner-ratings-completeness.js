const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function checkWinnerRatingsCompleteness() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ winner_ratings...');
        
        // 1. –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ auction_lots
        const uniqueWinnersInLots = await pool.query(`
            SELECT COUNT(DISTINCT winner_login) as unique_winners
            FROM auction_lots 
            WHERE winner_login IS NOT NULL 
            AND winner_login != ''
            AND winning_bid IS NOT NULL 
            AND winning_bid > 0
        `);
        
        console.log(`\nüìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ auction_lots: ${uniqueWinnersInLots.rows[0].unique_winners}`);
        
        // 2. –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ winner_ratings
        const usersInRatings = await pool.query(`
            SELECT COUNT(*) as total_users
            FROM winner_ratings
        `);
        
        console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ winner_ratings: ${usersInRatings.rows[0].total_users}`);
        
        // 3. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ winner_ratings
        const missingUsers = await pool.query(`
            SELECT DISTINCT al.winner_login
            FROM auction_lots al
            WHERE al.winner_login IS NOT NULL 
            AND al.winner_login != ''
            AND al.winning_bid IS NOT NULL 
            AND al.winning_bid > 0
            AND NOT EXISTS (
                SELECT 1 FROM winner_ratings wr 
                WHERE wr.winner_login = al.winner_login
            )
            ORDER BY al.winner_login
            LIMIT 20
        `);
        
        console.log(`\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï–¢ –≤ winner_ratings: ${missingUsers.rows.length}`);
        if (missingUsers.rows.length > 0) {
            console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
            missingUsers.rows.forEach((user, index) => {
                console.log(`  ${index + 1}. ${user.winner_login}`);
            });
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞—Ç–∞–º
        const dateStats = await pool.query(`
            SELECT 
                MIN(auction_end_date) as earliest_auction,
                MAX(auction_end_date) as latest_auction,
                COUNT(DISTINCT auction_number) as total_auctions
            FROM auction_lots 
            WHERE auction_end_date IS NOT NULL
        `);
        
        console.log(`\nüìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—É–∫—Ü–∏–æ–Ω–∞–º:`);
        console.log(`  - –°–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –∞—É–∫—Ü–∏–æ–Ω: ${dateStats.rows[0].earliest_auction}`);
        console.log(`  - –°–∞–º—ã–π –ø–æ–∑–¥–Ω–∏–π –∞—É–∫—Ü–∏–æ–Ω: ${dateStats.rows[0].latest_auction}`);
        console.log(`  - –í—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–æ–≤: ${dateStats.rows[0].total_auctions}`);
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ winner_ratings
        const ratingsDateStats = await pool.query(`
            SELECT 
                MIN(updated_at) as earliest_update,
                MAX(updated_at) as latest_update,
                COUNT(CASE WHEN updated_at IS NOT NULL THEN 1 END) as users_with_updates
            FROM winner_ratings
        `);
        
        console.log(`\nüìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ winner_ratings:`);
        console.log(`  - –°–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${ratingsDateStats.rows[0].earliest_update}`);
        console.log(`  - –°–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${ratingsDateStats.rows[0].latest_update}`);
        console.log(`  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏: ${ratingsDateStats.rows[0].users_with_updates}`);
        
        // 6. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
        const recentUsers = await pool.query(`
            SELECT DISTINCT al.winner_login, al.auction_number, al.auction_end_date
            FROM auction_lots al
            WHERE al.winner_login IS NOT NULL 
            AND al.winner_login != ''
            AND al.winning_bid IS NOT NULL 
            AND al.winning_bid > 0
            AND al.auction_end_date > '2024-01-01'
            AND NOT EXISTS (
                SELECT 1 FROM winner_ratings wr 
                WHERE wr.winner_login = al.winner_login
            )
            ORDER BY al.auction_end_date DESC
            LIMIT 10
        `);
        
        console.log(`\nüÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ 2024+ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ winner_ratings): ${recentUsers.rows.length}`);
        if (recentUsers.rows.length > 0) {
            console.log('üìã –ü—Ä–∏–º–µ—Ä—ã:');
            recentUsers.rows.forEach((user, index) => {
                console.log(`  ${index + 1}. ${user.winner_login} (–∞—É–∫—Ü–∏–æ–Ω ${user.auction_number}, ${user.auction_end_date})`);
            });
        }
        
        // 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        const missingCount = missingUsers.rows.length;
        if (missingCount > 0) {
            console.log(`\n‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
            console.log(`  - –í —Ç–∞–±–ª–∏—Ü–µ winner_ratings –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${missingCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            console.log(`  - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤`);
            console.log(`  - –ö–æ–º–∞–Ω–¥–∞: node update-all-ratings.js`);
        } else {
            console.log(`\n‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ winner_ratings!`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

checkWinnerRatingsCompleteness();
